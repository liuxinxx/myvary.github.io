<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>firewalld对指定IP开放指定端口的配置</title>
    <link href="/2020/06/06/firewalld%E5%AF%B9%E6%8C%87%E5%AE%9AIP%E5%BC%80%E6%94%BE%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/06/06/firewalld%E5%AF%B9%E6%8C%87%E5%AE%9AIP%E5%BC%80%E6%94%BE%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-打开firewalld防火墙"><a href="#1-打开firewalld防火墙" class="headerlink" title="1.打开firewalld防火墙"></a>1.打开<a href="https://www.centos.bz/tag/firewalld/" target="_blank" rel="noopener">firewalld</a>防火墙</h1><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> firewalld.service</code></pre><h1 id="2-添加防火墙规则（对指定ip开放指定端口）"><a href="#2-添加防火墙规则（对指定ip开放指定端口）" class="headerlink" title="2.添加防火墙规则（对指定ip开放指定端口）"></a>2.添加防火墙规则（对指定ip开放指定端口）</h1><pre><code class="hljs routeros"><span class="hljs-comment">#（1） Postgresql端口设置。允许192.168.142.166访问5432端口</span>firewall-cmd --permanent <span class="hljs-attribute">--add-rich-rule</span>=<span class="hljs-string">"rule family="</span>ipv4" source <span class="hljs-attribute">address</span>=<span class="hljs-string">"192.168.142.166"</span><span class="hljs-built_in"> port </span><span class="hljs-attribute">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">"5432"</span> accept<span class="hljs-string">"</span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">#（2）redis端口设置。允许192.168.142.166访问6379端口</span><span class="hljs-string"></span><span class="hljs-string">firewall-cmd --permanent --add-rich-rule="</span>rule <span class="hljs-attribute">family</span>=<span class="hljs-string">"ipv4"</span> source <span class="hljs-attribute">address</span>=<span class="hljs-string">"192.168.142.166"</span><span class="hljs-built_in"> port </span><span class="hljs-attribute">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">"6379"</span> accept<span class="hljs-string">"</span><span class="hljs-string"></span><span class="hljs-string">#（3）beanstalkd端口设置。允许192.168.142.166访问11300端口</span><span class="hljs-string"></span><span class="hljs-string">firewall-cmd --permanent --add-rich-rule="</span>rule <span class="hljs-attribute">family</span>=<span class="hljs-string">"ipv4"</span> source <span class="hljs-attribute">address</span>=<span class="hljs-string">"192.168.142.166"</span><span class="hljs-built_in"> port </span><span class="hljs-attribute">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">"11300"</span> accept<span class="hljs-string">"</span></code></pre><h1 id="3-重启防火墙，使配置生效"><a href="#3-重启防火墙，使配置生效" class="headerlink" title="3.重启防火墙，使配置生效"></a>3.重启防火墙，使配置生效</h1><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">firewalld</span><span class="hljs-selector-class">.service</span></code></pre><h1 id="4-查看配置结果，验证配置"><a href="#4-查看配置结果，验证配置" class="headerlink" title="4.查看配置结果，验证配置"></a>4.查看配置结果，验证配置</h1><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --list-all</span></code></pre><h1 id="5-删除规则"><a href="#5-删除规则" class="headerlink" title="5.删除规则"></a>5.删除规则</h1><p>示例：</p><pre><code class="hljs routeros">firewall-cmd --permanent <span class="hljs-attribute">--remove-rich-rule</span>=<span class="hljs-string">"rule family="</span>ipv4" source <span class="hljs-attribute">address</span>=<span class="hljs-string">"192.168.142.166"</span><span class="hljs-built_in"> port </span><span class="hljs-attribute">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">"11300"</span> accept<span class="hljs-string">"</span><span class="hljs-string">systemctl restart firewalld.service</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 6.5 无界面安装 Oracle 11g R2</title>
    <link href="/2020/06/06/CentOS%20%E6%97%A0%E7%95%8C%E9%9D%A2%E5%AE%89%E8%A3%85%20Oracle%2011g%20R2/"/>
    <url>/2020/06/06/CentOS%20%E6%97%A0%E7%95%8C%E9%9D%A2%E5%AE%89%E8%A3%85%20Oracle%2011g%20R2/</url>
    
    <content type="html"><![CDATA[<p>系统环境基于无外网和无图形化界面安装Oracle 11G。 <a id="more"></a></p><h3 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h3><ul><li><p>XShell+Xftp：用于连接Linux系统的终端模拟工具和FTP传输工具</p></li><li><p>Oracle安装文件下载（Oracle Database 11g Release 2安装包文件总大小约2G）：<br><a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html</a><br>下载完毕后会有两个文件（我所安装的Linux服务器是64位）：</p><pre><code class="hljs css"><span class="hljs-selector-tag">linux</span><span class="hljs-selector-class">.x64_11gR2_database_1of1</span><span class="hljs-selector-class">.zip</span></code></pre><pre><code class="hljs css"><span class="hljs-selector-tag">linux</span><span class="hljs-selector-class">.x64_11gR2_database_2of2</span><span class="hljs-selector-class">.zip</span></code></pre></li></ul><h3 id="检查系统配置"><a href="#检查系统配置" class="headerlink" title="检查系统配置"></a>检查系统配置</h3><p>Oracle Database 11g Release 2官方的系统配置要求如下：</p><ul><li>物理运行内存（Physical RAM）：1GB以上，推荐配置2GB以上<br>查看内存占用情况：<pre><code class="hljs cpp"><span class="hljs-built_in">free</span> -g</code></pre></li><li>硬盘空间（Disk Space）：8GB以上，/tmp目录剩余空间在1GB以上<br>查看其他挂载区的目录使用情况：<pre><code class="hljs ebnf"><span class="hljs-attribute">df -h</span></code></pre></li><li>查看目录的剩余空间：</li></ul><pre><code class="hljs jboss-cli">df -kh <span class="hljs-string">/tmp</span></code></pre><ul><li>查看系统当前的版本：<pre><code class="hljs ebnf"><span class="hljs-attribute">lsb_release -a</span></code></pre></li><li>查看系统对应的版本和位数：<pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /proc/<span class="hljs-keyword">version</span></code></pre></li></ul><p>我所安装的服务器环境是 Red Hat Enterprise Linux 4</p><h3 id="系统安装Oracle-11g-R2所必须的安装包"><a href="#系统安装Oracle-11g-R2所必须的安装包" class="headerlink" title="系统安装Oracle 11g R2所必须的安装包"></a>系统安装Oracle 11g R2所必须的安装包</h3><pre><code class="hljs angelscript">binutils<span class="hljs-number">-2.15</span><span class="hljs-number">.92</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>compat-libstdc++<span class="hljs-number">-33</span><span class="hljs-number">-3.2</span><span class="hljs-number">.3</span>elfutils-libelf<span class="hljs-number">-0.97</span>elfutils-libelf-devel<span class="hljs-number">-0.97</span>expat<span class="hljs-number">-1.95</span><span class="hljs-number">.7</span>gcc<span class="hljs-number">-3.4</span><span class="hljs-number">.6</span>gcc-c++<span class="hljs-number">-3.4</span><span class="hljs-number">.6</span>glibc<span class="hljs-number">-2.3</span><span class="hljs-number">.4</span><span class="hljs-number">-2.41</span>glibc-common<span class="hljs-number">-2.3</span><span class="hljs-number">.4</span>glibc-devel<span class="hljs-number">-2.3</span><span class="hljs-number">.4</span>glibc-headers<span class="hljs-number">-2.3</span><span class="hljs-number">.4</span>libaio<span class="hljs-number">-0.3</span><span class="hljs-number">.105</span>libaio-devel<span class="hljs-number">-0.3</span><span class="hljs-number">.105</span>libgcc<span class="hljs-number">-3.4</span><span class="hljs-number">.6</span>libstdc++<span class="hljs-number">-3.4</span><span class="hljs-number">.6</span>libstdc++-devel3<span class="hljs-number">.4</span><span class="hljs-number">.6</span>make<span class="hljs-number">-3.80</span>numactl<span class="hljs-number">-0.6</span><span class="hljs-number">.4</span>.x86_64pdksh<span class="hljs-number">-5.2</span><span class="hljs-number">.14</span>sysstat<span class="hljs-number">-5.0</span><span class="hljs-number">.5</span></code></pre><ul><li><p>查询系统安装软件是否缺失：</p><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span>|<span class="hljs-keyword">grep</span> 软件包名</code></pre><p>我所安装Oracle的服务器不能连接外网，只能通过下载安装包用FTP传输到服务器上安装，以上安装包缺失可以到一下地址查找：<br><a href="http://vault.centos.org/6.5/os/x86_64/Packages/" target="_blank" rel="noopener">http://vault.centos.org/6.5/os/x86_64/Packages/</a></p></li><li><p>安装软件命令(具体安装顺序自己调配，不能用通配符批量安装，会出现依赖问题)：</p><pre><code class="hljs css"><span class="hljs-selector-tag">rpm</span> <span class="hljs-selector-tag">-ivh</span> 软件名<span class="hljs-selector-class">.rpm</span></code></pre><h3 id="配置内核参数和资源限制"><a href="#配置内核参数和资源限制" class="headerlink" title="配置内核参数和资源限制"></a>配置内核参数和资源限制</h3><p>使用vi编辑器对/etc/sysctl.conf文件进行编辑：</p><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/sysctl.<span class="hljs-keyword">conf</span></code></pre><p>文件末尾添加一下内容：</p></li></ul><pre><code class="hljs ini"><span class="hljs-attr">fs.aio-max-nr</span> = <span class="hljs-number">1048576</span><span class="hljs-attr">fs.file-max</span> = <span class="hljs-number">6815744</span><span class="hljs-attr">kernel.shmall</span> = <span class="hljs-number">2097152</span><span class="hljs-attr">kernel.shmmax</span> = <span class="hljs-number">536870912</span><span class="hljs-attr">kernel.shmmni</span> = <span class="hljs-number">4096</span><span class="hljs-attr">kernel.sem</span> = <span class="hljs-number">250</span> <span class="hljs-number">32000</span> <span class="hljs-number">100</span> <span class="hljs-number">128</span><span class="hljs-attr">net.ipv4.ip_local_port_range</span> = <span class="hljs-number">9000</span> <span class="hljs-number">65500</span><span class="hljs-attr">net.core.rmem_default</span> = <span class="hljs-number">262144</span><span class="hljs-attr">net.core.rmem_max</span> = <span class="hljs-number">4194304</span><span class="hljs-attr">net.core.wmem_default</span> = <span class="hljs-number">262144</span><span class="hljs-attr">net.core.wmem_max</span> = <span class="hljs-number">1048576</span></code></pre><ul><li><p>使内核参数生效，执行命令:</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sysctl -p</span></code></pre><h3 id="创建Oracle相关用户"><a href="#创建Oracle相关用户" class="headerlink" title="创建Oracle相关用户"></a>创建Oracle相关用户</h3></li><li><p>创建用户组oinstall：</p><pre><code class="hljs angelscript">groupadd -g <span class="hljs-number">200</span> oinstall</code></pre></li><li><p>创建用户组dba：</p><pre><code class="hljs angelscript">groupadd -g <span class="hljs-number">201</span> dba</code></pre></li><li><p>创建oracle用户并指定用户组和Oracle用户的用户目录：</p><pre><code class="hljs angelscript">useradd -u <span class="hljs-number">440</span> -g oinstall -G dba -d /home/oracle oracle</code></pre></li><li><p>更改Oracle用户的用户登录密码：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">passwd oracle</span></code></pre></li></ul><h3 id="修改登录系统参数"><a href="#修改登录系统参数" class="headerlink" title="修改登录系统参数"></a>修改登录系统参数</h3><ul><li>使用vi编辑器对/etc/pam.d/login文件进行编辑：<pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>pam.d<span class="hljs-regexp">/login</span></code></pre>在文件末尾添加:<pre><code class="hljs css"><span class="hljs-selector-tag">session</span> <span class="hljs-selector-tag">required</span> <span class="hljs-selector-tag">pam_limits</span><span class="hljs-selector-class">.so</span></code></pre></li></ul><h3 id="修改Oracle软件安装用户的资源限制"><a href="#修改Oracle软件安装用户的资源限制" class="headerlink" title="修改Oracle软件安装用户的资源限制"></a>修改Oracle软件安装用户的资源限制</h3><ul><li>使用vi编辑器对/etc/security/limits.conf文件进行编辑：<pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/security/limits.<span class="hljs-keyword">conf</span></code></pre>在文件末尾添加:</li></ul><pre><code class="hljs angelscript">oracle soft nproc <span class="hljs-number">2047</span>oracle hard nproc <span class="hljs-number">16384</span>oracle soft nofile <span class="hljs-number">1024</span>oracle hard nofile <span class="hljs-number">65536</span></code></pre><h3 id="修改环境变量文件"><a href="#修改环境变量文件" class="headerlink" title="修改环境变量文件"></a>修改环境变量文件</h3><ul><li>使用vi编辑器对/etc/profile文件进行编辑：<pre><code class="hljs routeros">vi /etc/profile在文件末尾添加：<span class="hljs-keyword">if</span> [ <span class="hljs-variable">$USER</span> = <span class="hljs-string">"oracle"</span> ]; then<span class="hljs-keyword">if</span> [ <span class="hljs-variable">$SHELL</span> = <span class="hljs-string">"/bin/ksh"</span> ]; thenulimit -p 16384ulimit -n 65536<span class="hljs-keyword">else</span>ulimit -u 16384 -n 65536fifi</code></pre></li><li>更新配置文件更改：<pre><code class="hljs vim"><span class="hljs-keyword">source</span> <span class="hljs-keyword">profile</span></code></pre><h3 id="创建目录并分配权限"><a href="#创建目录并分配权限" class="headerlink" title="创建目录并分配权限"></a>创建目录并分配权限</h3></li><li>创建目录</li></ul><pre><code class="hljs arduino"><span class="hljs-built_in">mkdir</span> /oracle</code></pre><ul><li>授权目录给当前用户/其他用户/用户组 可读可写可执行</li></ul><pre><code class="hljs angelscript">chmod -R <span class="hljs-number">775</span> /oracle</code></pre><pre><code class="hljs groovy">chown -R <span class="hljs-string">oracle:</span>oinstall /oracle</code></pre><ul><li>切换到oracle帐号并添加oracle用户下面的环境变量：</li></ul><pre><code class="hljs ebnf"><span class="hljs-attribute">su - oracle</span></code></pre><ul><li>使用vi编辑器对用户目录下.bash_profile文件进行编辑：</li></ul><pre><code class="hljs jboss-cli">vi ~<span class="hljs-string">/.bash_profile</span></code></pre><p>在.base_profile里面添加如下内容（有些内容存在就不用加，对照着修改）<br>ORACLE_HOME在配置时注意后面不要带有:分隔符，否则PATH会取不到；<br>ORACLE_HOME的路径；<br>ORACLE_SID是对应后面创建数据库SID的，可以随时更改；<br>以下是配置内容：</p><pre><code class="hljs routeros"><span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HOME/binumask 022<span class="hljs-builtin-name">export</span> PATH<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">ORACLE_BASE</span>=/oracle<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">ORACLE_SID</span>=orcl<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">ORACLE_HOME</span>=<span class="hljs-variable">$ORACLE_BASE</span>/product/11.2.0/dbhome_1<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$ORACLE_HOME/bin:</code></pre><h3 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h3><ul><li><p>Ctrl+D注销Oracle用户，切换成root用户</p></li><li><p>解压Oracle 11g R2 数据库压缩包（在本文我已经把数据库压缩包用FTP软件传输到/tmp目录下），执行命令：</p><pre><code class="hljs properties"><span class="hljs-attr">cd</span> <span class="hljs-string">/tmp</span><span class="hljs-attr">unzip</span> <span class="hljs-string">linux.x64_11gR2_database_1of2.zip</span><span class="hljs-attr">unzip</span> <span class="hljs-string">linux.x64_11gR2_database_2of2.zip</span></code></pre></li><li><p>拷贝database/response/下面的dbca.rsp、db_install.rsp及netca.rsp三个文件至/home/oracle目录中：</p><pre><code class="hljs dts">cp database<span class="hljs-meta-keyword">/response/</span>dbca.rsp <span class="hljs-meta-keyword">/home/</span>oracle/cp database<span class="hljs-meta-keyword">/response/</span>db_install.rsp <span class="hljs-meta-keyword">/home/</span>oracle/cp database<span class="hljs-meta-keyword">/response/</span>netca.rsp <span class="hljs-meta-keyword">/home/</span>oracle/chmod <span class="hljs-number">777</span> <span class="hljs-meta-keyword">/home/</span>oracle/dbca.rsp</code></pre></li><li><p>使用vi编辑数据库安装的配置文件db_install.rsp：</p></li></ul><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/home/oracle</span>vi db_install.rsp</code></pre><p>修改如下参数:</p><pre><code class="hljs ini"><span class="hljs-attr">Oracle.install.option</span>=INSTALL_DB_SWONLY<span class="hljs-attr">ORACLE_HOSTNAME</span>= master<span class="hljs-attr">UNIX_GROUP_NAME</span>=oinstall<span class="hljs-attr">INVENTORY_LOCATION</span>=/oracle/oraInventory<span class="hljs-attr">SELECTED_LANGUAGES</span>=en,zh_CN<span class="hljs-attr">ORACLE_HOME</span>=/oracle/product/<span class="hljs-number">11.2</span>.<span class="hljs-number">0</span>/dbhome_1<span class="hljs-attr">ORACLE_BASE</span>=/oracle<span class="hljs-attr">Oracle.install.db.InstallEdition</span>=EE<span class="hljs-attr">Oracle.install.db.DBA_GROUP</span>=dba<span class="hljs-attr">Oracle.install.db.OPER_GROUP</span>=oinstall<span class="hljs-attr">Oracle.install.db.config.starterdb.type</span>=GENERAL_PURPOSE<span class="hljs-attr">Oracle.install.db.config.starterdb.globalDBName</span>=orcl<span class="hljs-attr">Oracle.install.db.config.starterdb.SID</span>=orcl<span class="hljs-attr">Oracle.install.db.config.starterdb.characterSet</span>=ZHS16GBK<span class="hljs-attr">Oracle.install.db.config.starterdb.password.ALL</span>=oracle<span class="hljs-attr">DECLINE_SECURITY_UPDATES</span>=<span class="hljs-literal">true</span></code></pre><ul><li><p>切换到oracle 帐号，创建oraInventory目录：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">su - oracle</span></code></pre><pre><code class="hljs arduino"><span class="hljs-built_in">mkdir</span> /oracle/oraInventory</code></pre></li><li><p>切换到刚才解压的Oracle安装文件根目录中：</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/tmp/database</span></code></pre></li><li><p>开始执行安装操作：</p><pre><code class="hljs awk">.<span class="hljs-regexp">/runInstaller -silent -ignorePrereq -responseFile /</span>home<span class="hljs-regexp">/oracle/</span>db_install.rsp</code></pre><p>在/oracle/oraInventory/logs/可以查看对应的安装日志文件。</p></li><li><p>上述执行成功会提示执行两个脚本<br>Ctrl+D注销Oracle用户，切换成root用户<br>执行orainstRoot.sh及root.sh两脚本：</p><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /oracle/oraInventory<span class="hljs-keyword">sh</span> orainstRoot.<span class="hljs-keyword">sh</span><span class="hljs-keyword">cd</span> /oracle/product/11.2.0/dbhome_1<span class="hljs-keyword">sh</span> root.<span class="hljs-keyword">sh</span></code></pre></li><li><p>切换成oracle用户：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">su - oracle</span></code></pre></li><li><p>安装监听,直接执行监听脚本:</p><pre><code class="hljs jboss-cli">netca <span class="hljs-string">/silent</span> <span class="hljs-string">/responseFile</span> <span class="hljs-string">/home/oracle/netca.rsp</span></code></pre><h3 id="安装数据库实例"><a href="#安装数据库实例" class="headerlink" title="安装数据库实例"></a>安装数据库实例</h3></li><li><p>使用vi编辑配置文件dbca.rsp：</p><pre><code class="hljs css"><span class="hljs-selector-tag">vi</span> <span class="hljs-selector-tag">dbca</span><span class="hljs-selector-class">.rsp</span></code></pre><p>修改以下配置，后面5个都要删掉前面的#号改参数值:</p><pre><code class="hljs ini"><span class="hljs-attr">GDBNAME</span>=<span class="hljs-string">"orcl"</span><span class="hljs-attr">SID</span>=<span class="hljs-string">"orcl"</span><span class="hljs-attr">DATAFILEDESTINATION</span>=<span class="hljs-string">"/oracle/oradata"</span><span class="hljs-attr">RECOVERYAREADESTINATION</span>=<span class="hljs-string">"/oracle/flash_recovery_area"</span><span class="hljs-attr">CHARACTERSET</span>=<span class="hljs-string">"ZHS16GBK"</span><span class="hljs-attr">TOTALMEMORY</span>=<span class="hljs-string">"800"</span><span class="hljs-attr">SYSPASSWORD</span> = <span class="hljs-string">"password"</span><span class="hljs-attr">SYSTEMPASSWORD</span> = <span class="hljs-string">"password"</span></code></pre><p>上面配置注意去掉#,不然是注释不生效<br>SYSPASSWORD和SYSTEMPASSWORD是sys和system数据库用户的默认密码（自己自行设置），不设置密码无法安装实例，显示终端一直滚动换行。</p></li><li><p>静默模式建实例（确保在oracle用户下执行）:</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~dbca -silent -responseFile ~<span class="hljs-string">/dbca.rsp</span></code></pre><p>如果出现<code>Set DISPLAY environment variable, then re-run.</code> 错误</p></li></ul><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DISPLAY</span>=:1.0</code></pre><p>然后在执行</p><p>另外：删除数据库实例方法，更改以上配置文件中的OPERATION_TYPE,默认为createDatabase，变更为一下内容：</p><pre><code class="hljs ini"><span class="hljs-attr">OPERATION_TYPE</span> = <span class="hljs-string">"deleteDatabase"</span></code></pre><p>执行命令：</p><pre><code class="hljs jboss-cli">dbca -silent -responseFile ~<span class="hljs-string">/dbca.rsp</span></code></pre><h3 id="测试和修改Oracle用户密码有效期"><a href="#测试和修改Oracle用户密码有效期" class="headerlink" title="测试和修改Oracle用户密码有效期"></a>测试和修改Oracle用户密码有效期</h3><ul><li><p>执行命令：</p><pre><code class="hljs jboss-cli">sqlplus <span class="hljs-string">/nolog</span></code></pre></li><li><p>SQLPlus：<br>以sysdba身份登录：</p><pre><code class="hljs actionscript">conn / <span class="hljs-keyword">as</span> sysdba</code></pre><p>查询用户密码有效时间：</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> dba_profiles s <span class="hljs-keyword">WHERE</span> s.profile=<span class="hljs-string">'DEFAULT'</span> <span class="hljs-keyword">AND</span> resource_name=<span class="hljs-string">'PASSWORD_LIFE_TIME'</span>;</code></pre><p>修改有效时间为不限制：</p><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> PROFILE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">LIMIT</span> PASSWORD_LIFE_TIME <span class="hljs-keyword">UNLIMITED</span>;</code></pre></li></ul><h4 id="附上一些命令查看Oracle端口和Oracle进程"><a href="#附上一些命令查看Oracle端口和Oracle进程" class="headerlink" title="附上一些命令查看Oracle端口和Oracle进程"></a>附上一些命令查看Oracle端口和Oracle进程</h4><ul><li><p>查看Oracle开放的1521端口号：</p><pre><code class="hljs 1c">netstat -lnp<span class="hljs-string">|grep 1521</span></code></pre></li><li><p>查看oracle进程：</p><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> oracle</code></pre></li></ul><p>参考文章：<br><a href="http://docs.oracle.com/cd/E11882_01/install.112/e24326/toc.htm#CEGIHDBF" target="_blank" rel="noopener">http://docs.oracle.com/cd/E11882_01/install.112/e24326/toc.htm#CEGIHDBF</a><br><a href="http://haowen.blog.51cto.com/3486731/1599042" target="_blank" rel="noopener">http://haowen.blog.51cto.com/3486731/1599042</a><br><a href="https://zhuanlan.zhihu.com/p/22600543?utm_source=qq&amp;utm_medium=social" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22600543?utm_source=qq&amp;utm_medium=social</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>oracle,centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rails 部署</title>
    <link href="/2020/06/05/Rails%20%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/06/05/Rails%20%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h3><blockquote><p>在服务器添加一个新的用户，用户名为deploy<a href="">教程</a></p></blockquote><ul><li><p>执行命令<code>adduser</code> </p></li><li><p>按提示输入密码</p></li><li><p>设置一些个人信息，可以直接按enter键，设为空</p></li><li><p>添加权限</p><a id="more"></a><p>在root用户下，打开<code>/etc/sudoers</code>文件</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> This file MUST be edited with the <span class="hljs-string">'visudo'</span> <span class="hljs-built_in">command</span> as root.</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> Please consider adding <span class="hljs-built_in">local</span> content <span class="hljs-keyword">in</span> /etc/sudoers.d/ instead of</span><span class="hljs-meta">#</span><span class="bash"> directly modifying this file.</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> See the man page <span class="hljs-keyword">for</span> details on how to write a sudoers file.</span><span class="hljs-meta">#</span>Defaults        env_resetDefaults        mail_badpassDefaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"<span class="hljs-meta">#</span><span class="bash"> Host <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> User <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> Cmnd <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> User privilege specification</span>root    ALL=(ALL:ALL) ALLdeploy  ALL=(ALL:ALL) ALL # 添加这一行，使deploy具有使用sudo的权限<span class="hljs-meta">#</span><span class="bash"> Members of the admin group may gain root privileges</span><span class="hljs-meta">%</span><span class="bash">admin ALL=(ALL) ALL</span><span class="hljs-meta">#</span><span class="bash"> Allow members of group sudo to execute any <span class="hljs-built_in">command</span></span><span class="hljs-meta">%</span><span class="bash">sudo   ALL=(ALL:ALL) ALL</span><span class="hljs-meta">#</span><span class="bash"> See sudoers(5) <span class="hljs-keyword">for</span> more information on <span class="hljs-string">"#include"</span> directives:</span><span class="hljs-meta">#</span><span class="bash">includedir /etc/sudoers.d</span></code></pre></li></ul><h3 id="ruby安装"><a href="#ruby安装" class="headerlink" title="ruby安装"></a>ruby安装</h3><ul><li><p>安装<code>rbenv</code>  <a href="https://ruby-china.org/wiki/rbenv-guide" target="_blank" rel="noopener">教程来源</a><br><code>sudo deploy</code>回到deploy下</p><pre><code class="hljs shell">git clone https://github.com/rbenv/rbenv.git ~/.rbenv<span class="hljs-meta">#</span><span class="bash"> 用来编译安装 ruby</span>git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build<span class="hljs-meta">#</span><span class="bash"> 用来管理 gemset, 可选, 因为有 bundler 也没什么必要</span>git clone git://github.com/jamis/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset<span class="hljs-meta">#</span><span class="bash"> 通过 rbenv update 命令来更新 rbenv 以及所有插件, 推荐</span>git clone git://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update<span class="hljs-meta">#</span><span class="bash"> 使用 Ruby China 的镜像安装 Ruby, 国内用户推荐</span>git clone git://github.com/AndorChen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror</code></pre><p>然后把下面的代码放到 <code>~/.bashrc</code> 里</p><pre><code class="hljs shell">export PATH="$HOME/.rbenv/bin:$PATH"eval "$(rbenv init -)"</code></pre><p>然后重开一个终端就可以执行 rbenv 了.</p></li><li><p>安装ruby</p><pre><code class="hljs shell">rbenv install --list  # 列出所有 ruby 版本rbenv install 2.5.0     # 安装 2.5.0</code></pre><p>安转过程可能出现缺少依赖的错误，可参考<a href="https://gist.github.com/sandyxu/8aceec7e436a6ab9621f" target="_blank" rel="noopener">这篇文章解决</a><br>一般解决办法:</p><pre><code class="hljs shell">sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline6 libreadline6-dev zlib1g zlib1g-dev</code></pre></li><li><p>验证安装是否成功</p><pre><code class="hljs shell">rbenv versions               # 列出安装的版本rbenv version                # 列出正在使用的版本</code></pre></li><li><p>设置版本</p><pre><code class="hljs shell">rbenv global 2.5.0      # 默认使用 2.5.0rbenv shell 2.5.0       # 当前的 shell 使用 2.5.0, 会设置一个 `RBENV_VERSION` 环境变量rbenv local jruby-1.7.3      # 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件</code></pre></li><li><p>last</p><pre><code class="hljs shell">rbenv rehash                 # 每当切换 ruby 版本和执行 bundle install 之后必须执行这个命令rbenv which irb              # 列出 irb 这个命令的完整路径rbenv whence irb             # 列出包含 irb 这个命令的版本</code></pre></li><li><p>安装<code>bundle</code></p><pre><code class="hljs shell">gem install bundle</code></pre></li><li><p>安装<code>rails</code></p><pre><code class="hljs shell">gem install rails</code></pre></li><li><p>安装nodejs</p><pre><code class="hljs shell">sudo apt install nodejs</code></pre></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>  使用postgresql数据库<a href="https://www.postgresql.org/download/linux/ubuntu/" target="_blank" rel="noopener">教程来源</a></p><pre><code class="hljs shell">sudo apt-get install postgresql</code></pre><ul><li><p>新建数据库用户</p><pre><code class="hljs shell">sudo -i -u postgres  //切换到数据库的超级管理员psql                 //进入数据库控制台create user deploy with password 'xxxx'; //新建一个deploy用户，密码是xxxalter role deploy with createdb; //使deploy用户具有创建数据库的权限alter role deploy with login；//使deploy用户具有登录数据库的权限</code></pre></li><li><p>注意：</p><p>在后面安装pg gem时，可能会出现<code>You need to install postgresql-server-dev-X.Y for building a server-side extension or libpq-dev for building a client-side application</code>错误,依次执行：</p><pre><code class="hljs shell">sudo apt-get install python-psycopg2sudo apt-get install libpq-dev</code></pre></li></ul><h3 id="nginx-passenger-安装"><a href="#nginx-passenger-安装" class="headerlink" title="nginx passenger 安装"></a>nginx passenger 安装</h3><p>  <a href="https://www.phusionpassenger.com/library/install/nginx/install/oss/xenial/" target="_blank" rel="noopener">这里很详细了</a></p><pre><code class="hljs shell">sudo apt-get install -y dirmngr gnupgsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7sudo apt-get install -y apt-transport-https ca-certificatessudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main &gt; /etc/apt/sources.list.d/passenger.list'sudo apt-get updatesudo apt-get install -y nginx-extras passenger</code></pre><ul><li><p>passenger的配置</p><p>nginx安装以后，打开<code>/etc/nginx/passenger.conf</code>会看到</p><pre><code class="hljs conf">passenger_root &#x2F;usr&#x2F;lib&#x2F;ruby&#x2F;vendor_ruby&#x2F;phusion_passenger&#x2F;locations.ini;passenger_ruby &#x2F;home&#x2F;deploy&#x2F;.rbenv&#x2F;shims&#x2F;ruby; &#x2F;&#x2F;这里需要修改ruby的安装路径</code></pre><p><code>which ruby</code> 可以查看ruby的路径</p></li></ul><h3 id="Capistrano配置原文教程"><a href="#Capistrano配置原文教程" class="headerlink" title="Capistrano配置原文教程"></a>Capistrano配置<a href="https://ruby-china.org/topics/18616" target="_blank" rel="noopener">原文教程</a></h3><ul><li><p>安装必要的包</p><pre><code class="hljs ruby">group <span class="hljs-symbol">:development</span> <span class="hljs-keyword">do</span>gem <span class="hljs-string">'capistrano'</span>gem <span class="hljs-string">'capistrano-bundler'</span>gem <span class="hljs-string">'capistrano-rails'</span>gem <span class="hljs-string">'capistrano-rbenv'</span><span class="hljs-comment"># Add this if you're using rvm</span><span class="hljs-comment"># gem 'capistrano-rvm'</span><span class="hljs-keyword">end</span></code></pre></li><li><p><code>cap install</code></p></li><li><p>我的capfile文件</p><pre><code class="hljs ruby"><span class="hljs-comment"># Load DSL and set up stages</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/setup"</span><span class="hljs-comment"># Include default deployment tasks</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/deploy"</span><span class="hljs-comment"># Load the SCM plugin appropriate to your project:</span><span class="hljs-comment">#</span><span class="hljs-comment"># require "capistrano/scm/hg"</span><span class="hljs-comment"># install_plugin Capistrano::SCM::Hg</span><span class="hljs-comment"># or</span><span class="hljs-comment"># require "capistrano/scm/svn"</span><span class="hljs-comment"># install_plugin Capistrano::SCM::Svn</span><span class="hljs-comment"># or</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/scm/git"</span>install_plugin Capistrano::SCM::Git<span class="hljs-comment"># Include tasks from other gems included in your Gemfile</span><span class="hljs-comment">#</span><span class="hljs-comment"># For documentation on these, see for example:</span><span class="hljs-comment">#</span><span class="hljs-comment">#   https://github.com/capistrano/rvm</span><span class="hljs-comment">#   https://github.com/capistrano/rbenv</span><span class="hljs-comment">#   https://github.com/capistrano/chruby</span><span class="hljs-comment">#   https://github.com/capistrano/bundler</span><span class="hljs-comment">#   https://github.com/capistrano/rails</span><span class="hljs-comment">#   https://github.com/capistrano/passenger</span><span class="hljs-comment">#</span><span class="hljs-comment"># require "capistrano/rvm"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rbenv"</span><span class="hljs-comment"># require "capistrano/chruby"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/bundler"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rails/assets"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rails/migrations"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/passenger"</span>set <span class="hljs-symbol">:rbenv_type</span>, <span class="hljs-symbol">:user</span>set <span class="hljs-symbol">:rbenv_ruby</span>, <span class="hljs-string">'2.5.0'</span><span class="hljs-comment"># Load custom tasks from `lib/capistrano/tasks` if you have any defined</span>Dir.glob(<span class="hljs-string">"lib/capistrano/tasks/*.rake"</span>).each &#123; <span class="hljs-params">|r|</span> import r &#125;</code></pre><p>我的deploy.rb文件</p><pre><code class="hljs ruby"><span class="hljs-comment"># config valid for current version and patch releases of Capistrano</span>lock <span class="hljs-string">"~&gt; 3.10.2"</span>set <span class="hljs-symbol">:application</span>, <span class="hljs-string">"script_blog"</span>set <span class="hljs-symbol">:repo_url</span>, <span class="hljs-string">"https://github.com/dccmmtop/script_blog.git"</span><span class="hljs-comment"># Default branch is :master</span><span class="hljs-comment"># ask :branch, `git rev-parse --abbrev-ref HEAD`.chomp</span><span class="hljs-comment"># Default deploy_to directory is /var/www/my_app_name</span>set <span class="hljs-symbol">:deploy_to</span>, <span class="hljs-string">"/home/deploy/scrit_blog"</span><span class="hljs-comment"># Default value for :format is :airbrussh.</span><span class="hljs-comment"># set :format, :airbrussh</span><span class="hljs-comment"># You can configure the Airbrussh format using :format_options.</span><span class="hljs-comment"># These are the defaults.</span><span class="hljs-comment"># set :format_options, command_output: true, log_file: "log/capistrano.log", color: :auto, truncate: :auto</span><span class="hljs-comment"># Default value for :pty is false</span><span class="hljs-comment"># set :pty, true</span><span class="hljs-comment"># Default value for :linked_files is []</span><span class="hljs-comment"># 在服务器&lt;project-name&gt;/share/config/ 下，要手动新建这两个文件，</span>append <span class="hljs-symbol">:linked_files</span>, <span class="hljs-string">"config/database.yml"</span>,<span class="hljs-string">"config/secrets.yml"</span> <span class="hljs-comment"># Default value for linked_dirs is []</span>append <span class="hljs-symbol">:linked_dirs</span>, <span class="hljs-string">"log"</span>, <span class="hljs-string">"tmp/pids"</span>, <span class="hljs-string">"tmp/cache"</span>, <span class="hljs-string">"tmp/sockets"</span>, <span class="hljs-string">"public/system"</span><span class="hljs-comment"># Default value for default_env is &#123;&#125;</span><span class="hljs-comment"># set :default_env, &#123; path: "/opt/ruby/bin:$PATH" &#125;</span><span class="hljs-comment"># Default value for local_user is ENV['USER']</span><span class="hljs-comment"># set :local_user, -&gt; &#123; `git config user.name`.chomp &#125;</span><span class="hljs-comment"># Default value for keep_releases is 5</span><span class="hljs-comment"># set :keep_releases, 5</span><span class="hljs-comment"># Uncomment the following to require manually verifying the host key before first deploy.</span><span class="hljs-comment"># set :ssh_options, verify_host_key: :secure</span></code></pre><p>注意<code>append :linked_files, &quot;config/database.yml&quot;,&quot;config/secrets.yml&quot;</code> </p><p><code>database.yml</code>和<code>secrets.yml</code>是手动在,<code>share/config/</code>目录下新建的，一个是连接数据库的相关信息，一个是安全验证相关信息。我的部署目录是<code>scriot_blog/</code> 就新建  <code>script_blog/share/config/</code> 目录</p><p>同时新建以上两个文件。</p><p>database.yml</p><pre><code class="hljs yml"><span class="hljs-attr">production:</span><span class="hljs-attr">adapter:</span> <span class="hljs-string">postgresql</span><span class="hljs-attr">pool:</span> &lt;%=<span class="ruby"> ENV.fetch(<span class="hljs-string">"RAILS_MAX_THREADS"</span>) &#123; <span class="hljs-number">5</span> &#125; </span>%&gt;<span class="hljs-attr">timeout:</span> <span class="hljs-number">5000</span><span class="hljs-attr">database:</span> <span class="hljs-string">production_blog</span><span class="hljs-attr">username:</span> <span class="hljs-string">'xxx'</span><span class="hljs-attr">password:</span> <span class="hljs-string">'xxx'</span></code></pre><p>secrets.yml</p><pre><code class="hljs yml"><span class="hljs-attr">production:</span><span class="hljs-attr">secret_key_base:</span> <span class="hljs-string">xxxxxx</span></code></pre><p>其中<code>secret_key_base</code>的值是在本地项目下 执行<code>rake secret</code> 命令生成的。</p></li><li><p>deploy/production.rb</p><pre><code class="hljs ruby"><span class="hljs-comment"># server-based syntax</span><span class="hljs-comment"># ======================</span><span class="hljs-comment"># Defines a single server with a list of roles and multiple properties.</span><span class="hljs-comment"># You can define all roles on a single server, or split them:</span><span class="hljs-comment"># server "39.108.138.149", user: "root", roles: %w&#123;app db web&#125;, my_property: :my_value</span>server <span class="hljs-string">"xxxx服务器的ip"</span>, <span class="hljs-symbol">user:</span> <span class="hljs-string">"deploy"</span>, <span class="hljs-symbol">roles:</span> <span class="hljs-string">%w&#123;app db web&#125;</span><span class="hljs-comment"># server "example.com", user: "deploy", roles: %w&#123;app web&#125;, other_property: :other_value</span><span class="hljs-comment"># server "db.example.com", user: "deploy", roles: %w&#123;db&#125;</span><span class="hljs-comment"># role-based syntax</span><span class="hljs-comment"># ==================</span><span class="hljs-comment"># Defines a role with one or multiple servers. The primary server in each</span><span class="hljs-comment"># group is considered to be the first unless any hosts have the primary</span><span class="hljs-comment"># property set. Specify the username and a domain or IP for the server.</span><span class="hljs-comment"># Don't use `:all`, it's a meta role.</span><span class="hljs-comment"># role :app, %w&#123;deploy<span class="hljs-doctag">@example</span>.com&#125;, my_property: :my_value</span><span class="hljs-comment"># role :web, %w&#123;user1<span class="hljs-doctag">@primary</span>.com user2<span class="hljs-doctag">@additional</span>.com&#125;, other_property: :other_value</span><span class="hljs-comment"># role :db,  %w&#123;deploy<span class="hljs-doctag">@example</span>.com&#125;</span><span class="hljs-comment"># Configuration</span><span class="hljs-comment"># =============</span><span class="hljs-comment"># You can set any configuration variable like in config/deploy.rb</span><span class="hljs-comment"># These variables are then only loaded and set in this stage.</span><span class="hljs-comment"># For available Capistrano configuration variables see the documentation page.</span><span class="hljs-comment"># http://capistranorb.com/documentation/getting-started/configuration/</span><span class="hljs-comment"># Feel free to add new variables to customise your setup.</span><span class="hljs-comment"># Custom SSH Options</span><span class="hljs-comment"># ==================</span><span class="hljs-comment"># You may pass any option but keep in mind that net/ssh understands a</span><span class="hljs-comment"># limited set of options, consult the Net::SSH documentation.</span><span class="hljs-comment"># http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start</span><span class="hljs-comment">#</span><span class="hljs-comment"># Global options</span><span class="hljs-comment"># --------------</span>set <span class="hljs-symbol">:ssh_options</span>, &#123;<span class="hljs-symbol">keys:</span> <span class="hljs-string">%w(/home/deploy/.ssh/id_rsa)</span>,<span class="hljs-symbol">port:</span> xxx<span class="hljs-comment"># forward_agent: false,</span><span class="hljs-comment"># auth_methods: %w(password)</span>&#125;<span class="hljs-comment">#</span><span class="hljs-comment"># The server-based syntax can be used to override options:</span><span class="hljs-comment"># ------------------------------------</span><span class="hljs-comment"># server "example.com",</span><span class="hljs-comment">#   user: "user_name",</span><span class="hljs-comment">#     keys: %w(/home/user_name/.ssh/id_rsa),</span><span class="hljs-comment">#     forward_agent: false,</span><span class="hljs-comment">#     auth_methods: %w(publickey password)</span><span class="hljs-comment">#     # password: "please use keys"</span><span class="hljs-comment">#   &#125;</span></code></pre></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>  本地执行<code>cap production deploy</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>rails</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/05/hello-world/"/>
    <url>/2020/06/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
