<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker下安装Oracle-oracle-xe-11g</title>
    <link href="/posts/541632be.html"/>
    <url>/posts/541632be.html</url>
    
    <content type="html"><![CDATA[<h1 id="一-如何安装oracle"><a href="#一-如何安装oracle" class="headerlink" title="一.如何安装oracle"></a>一.如何安装oracle</h1><p>1.拉取镜像</p><pre><code class="hljs undefined">docker pull  docker.io&#x2F;arahman&#x2F;docker-oracle-xe-11g</code></pre><p>2.运行镜像</p><pre><code class="hljs kotlin">docker run -d -v /home/docker/<span class="hljs-keyword">data</span>/oracle_data:/<span class="hljs-keyword">data</span>/oracle_data -p <span class="hljs-number">49160</span>:<span class="hljs-number">22</span> -p <span class="hljs-number">1521</span>:<span class="hljs-number">1521</span> -e ORACLE_ALLOW_REMOTE=<span class="hljs-literal">true</span> docker.io/arahman/docker-oracle-xe-<span class="hljs-number">11</span>g</code></pre><p><strong>-e oracle_allow_remote=true表示允许远程连接</strong><br>3.连接参数：</p><pre><code class="hljs undefined">hostname: localhostport: 1521sid: xeusername: systempassword: oracle</code></pre><h1 id="二-设置用户"><a href="#二-设置用户" class="headerlink" title="二.设置用户"></a>二.设置用户</h1><p>如何新建表空间和用户：<br>(1).进入容器,连接到oracle服务</p><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 容器id /bin/bashsu oracle<span class="hljs-built_in">cd</span> <span class="hljs-variable">$ORACLE_HOME</span>bin/sqlplus / as sysdba</code></pre><p>(2).创建表空间</p><pre><code class="hljs bash">create tablespace ESCDB datafile  <span class="hljs-string">'/u01/app/oracle/escdb/escdb.dbf'</span> size 100M;</code></pre><p><strong>这一步可能会有问题，是因为容器里/u01/app/oracle文件夹下不存在escdb目录。可以先手动新建一个test目录，再给这个目录赋权限</strong></p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /u01/app/oraclemkdir escdbchmod 777 escdb</code></pre><p><strong>然后再执行create tablespace ESCDB datafile ‘/u01/app/oracle/escdb/escdb.dbf’ size 100M;</strong><br>(3).创建用户</p><pre><code class="hljs csharp">create user escdb identified <span class="hljs-keyword">by</span> para123456 <span class="hljs-keyword">default</span> tablespace ESCDB;</code></pre><pre><code class="hljs makefile"><span class="hljs-section">账号: escdb</span><span class="hljs-section">密码: para123456</span></code></pre><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/image-20200519225738763.png" srcset="/img/loading.gif" alt="image-20200519225738763" style="zoom:50%"><p>(4).给用户授权</p><pre><code class="hljs cpp">grant connect,resource to escdb;grant dba to escdb;<span class="hljs-comment">//授予dba权限后，这个用户能操作所有用户的表</span></code></pre><blockquote><p>注：如果新建用户失败，可能是这个用户已经存在，要先删除</p></blockquote><pre><code class="hljs rust"><span class="hljs-built_in">drop</span> user escdb cascade;</code></pre>]]></content>
    
    
    <categories>
      
      <category>centos</category>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装kafka</title>
    <link href="/posts/c591c796.html"/>
    <url>/posts/c591c796.html</url>
    
    <content type="html"><![CDATA[<p>docker安装kafka1:kafka需要zookeeper管理，所以需要先安装zookeeper。 下载docker pull wurstmeister/zookeeper:latest版本</p><a id="more"></a><h2 id="1-kafka需要zookeeper管理"><a href="#1-kafka需要zookeeper管理" class="headerlink" title="1:kafka需要zookeeper管理"></a>1:kafka需要zookeeper管理</h2><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull wurstmeister/zookeeper</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619153419.png" srcset="/img/loading.gif" alt="image-20200619153418802"></p><h2 id="2：启动镜像生成容器"><a href="#2：启动镜像生成容器" class="headerlink" title="2：启动镜像生成容器"></a>2：启动镜像生成容器</h2><pre><code class="hljs groovy">docker run -d --name zookeeper -p <span class="hljs-number">2181</span>:<span class="hljs-number">2181</span> -v <span class="hljs-regexp">/etc/</span><span class="hljs-string">localtime:</span><span class="hljs-regexp">/etc/</span>localtime wurstmeister/zookeeper</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619153438.png" srcset="/img/loading.gif" alt="image-20200619153437633"></p><h2 id="3：下载kafka镜像"><a href="#3：下载kafka镜像" class="headerlink" title="3：下载kafka镜像"></a>3：下载kafka镜像</h2><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull wurstmeister/kafka</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151435.png" srcset="/img/loading.gif" alt="image-20200619151435257"></p><h2 id="4：启动kafka镜像生成容器"><a href="#4：启动kafka镜像生成容器" class="headerlink" title="4：启动kafka镜像生成容器"></a>4：启动kafka镜像生成容器</h2><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d --name kafka -p 9092:9092 -e <span class="hljs-attribute">KAFKA_BROKER_ID</span>=0 -e <span class="hljs-attribute">KAFKA_ZOOKEEPER_CONNECT</span>=192.168.155.56:2181/kafka -e <span class="hljs-attribute">KAFKA_ADVERTISED_LISTENERS</span>=PLAINTEXT://192.168.155.56:9092 -e <span class="hljs-attribute">KAFKA_LISTENERS</span>=PLAINTEXT://0.0.0.0:9092 -v /etc/localtime:/etc/localtime wurstmeister/kafka</code></pre><pre><code class="hljs angelscript">-e KAFKA_BROKER_ID=<span class="hljs-number">0</span> 在kafka集群中，每个kafka都有一个BROKER_ID来区分自己-e KAFKA_ZOOKEEPER_CONNECT=<span class="hljs-number">192.168</span><span class="hljs-number">.155</span><span class="hljs-number">.56</span>:<span class="hljs-number">2181</span>/kafka 配置zookeeper管理kafka的路径<span class="hljs-number">192.168</span><span class="hljs-number">.155</span><span class="hljs-number">.56</span>:<span class="hljs-number">2181</span>/kafka-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT:<span class="hljs-comment">//192.168.155.56:9092 把kafka的地址端口注册给zookeeper</span>-e KAFKA_LISTENERS=PLAINTEXT:<span class="hljs-comment">//0.0.0.0:9092 配置kafka的监听端口</span>-v /etc/localtime:/etc/localtime 容器时间同步虚拟机的时间</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151532.png" srcset="/img/loading.gif" alt="image-20200619151532692"></p><h2 id="5：验证kafka是否可以使用"><a href="#5：验证kafka是否可以使用" class="headerlink" title="5：验证kafka是否可以使用"></a>5：验证kafka是否可以使用</h2><p>进入容器</p><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> kafka /bin/sh</code></pre><p>进入路径：<code>/opt/kafka_2.11-2.0.0/bin</code>下</p><p>运行kafka生产者发送消息</p><pre><code class="hljs vim">./kafka-console-producer.<span class="hljs-keyword">sh</span> --broker-<span class="hljs-keyword">list</span> localhos<span class="hljs-variable">t:9092</span> --topic <span class="hljs-keyword">sun</span></code></pre><p>发送消息</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">"datas"</span>: [        &#123;            <span class="hljs-attr">"channel"</span>: <span class="hljs-string">""</span>,            <span class="hljs-attr">"metric"</span>: <span class="hljs-string">"temperature"</span>,            <span class="hljs-attr">"producer"</span>: <span class="hljs-string">"ijinus"</span>,            <span class="hljs-attr">"sn"</span>: <span class="hljs-string">"IJA0101-00002245"</span>,            <span class="hljs-attr">"time"</span>: <span class="hljs-string">"1543207156000"</span>,            <span class="hljs-attr">"value"</span>: <span class="hljs-string">"80"</span>        &#125;    ],    <span class="hljs-attr">"ver"</span>: <span class="hljs-string">"1.0"</span>&#125;</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151547.png" srcset="/img/loading.gif" alt="image-20200619151546936"></p><p>‘</p><p>运行kafka消费者接收消息</p><pre><code class="hljs brainfuck"><span class="hljs-comment">kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">console</span><span class="hljs-literal">-</span><span class="hljs-comment">consumer</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> --<span class="hljs-comment">bootstrap</span><span class="hljs-literal">-</span><span class="hljs-comment">server</span> <span class="hljs-comment">localhost:9092</span> --<span class="hljs-comment">topic</span> <span class="hljs-comment">sun</span> --<span class="hljs-comment">from</span><span class="hljs-literal">-</span><span class="hljs-comment">beginning</span></code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151601.png" srcset="/img/loading.gif" alt="image-20200619151601184"></p><h2 id="关键总结"><a href="#关键总结" class="headerlink" title="关键总结"></a>关键总结</h2><p><strong>1：进入zookeeper容器内，可以看到kafka注册信息</strong></p><p><strong>docker exec -it zookeeper /bin/sh</strong></p><p><strong>进入bin目录</strong></p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151620.png" srcset="/img/loading.gif" alt="image-20200619151619940"></p><p><strong>运行zkCli.sh进入zookeeper客户端</strong></p><pre><code class="hljs jboss-cli"><span class="hljs-string">./zkCli.sh</span></code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151636.png" srcset="/img/loading.gif" alt="image-20200619151635588"></p><p><strong>ls / 可以查看zookeeper根节点下都挂了那些目录</strong></p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151652.png" srcset="/img/loading.gif" alt="image-20200619151652238"></p><p><strong>可以看到我注册的kafka目录，运行</strong></p><pre><code class="hljs awk">ls <span class="hljs-regexp">/kafka/</span>brokers<span class="hljs-regexp">/topics/</span>sun<span class="hljs-regexp">/partitions</span></code></pre><p><strong>可以看到我建立的topic叫sun主题的partitions信息</strong></p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151702.png" srcset="/img/loading.gif" alt="image-20200619151702795"></p><p><strong>get命令会显示该节点的节点数据内容和属性信息</strong></p><pre><code class="hljs awk">get <span class="hljs-regexp">/kafka/</span>brokers<span class="hljs-regexp">/topics/</span>sun</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151713.png" srcset="/img/loading.gif" alt="image-20200619151713626"></p><p>*<em>ls2命令会显示该节点的子节点信息和属性信息<br>*</em></p><pre><code class="hljs awk">ls2 <span class="hljs-regexp">/kafka/</span>brokers<span class="hljs-regexp">/topics/</span>sun</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151724.png" srcset="/img/loading.gif" alt="image-20200619151724348"></p><p><strong>通过命令行创建topic和partitions</strong></p><p><strong>kafka-topics.sh –create –zookeeper 192.168.155.56:2181/kafka –topic topic-test1 –replication-factor 1 –partitions 2</strong></p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151735.png" srcset="/img/loading.gif" alt="image-20200619151735692"></p><p><strong>当创建的replication-factor=2时，因为zookeeper的zoo.cfg配置文件中tickTime=2000会报链接超时，把这个值调大一些，重启zookeeper，再创建topic正常。</strong></p><p><img src="C:%5CUsers%5C72748%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200619151749786.png" srcset="/img/loading.gif" alt="image-20200619151749786"></p><p><strong>删除topic 使用命令：</strong></p><p>若 delete.topic.enable=true</p><p>直接彻底删除该 Topic。</p><p>若 delete.topic.enable=false</p><p>如果当前 Topic 没有使用过即没有传输过信息：可以彻底删除。</p><p>如果当前 Topic 有使用过即有过传输过信息：并没有真正删除 Topic 只是把这个 Topic 标记为删除(marked for deletion)，重启 Kafka Server 后删除。</p><p>我的kafka版本是最新的，在service.config文件中是找不到delete.topic.enable=true，系统默认是true.</p><p>进入kafka容器，cd opt/kafka/bin</p><p>kafka-topics.sh –delete –zookeeper 192.168.155.56:2181/kafka –topic sun</p><p><img src="C:%5CUsers%5C72748%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200619151801488.png" srcset="/img/loading.gif" alt="image-20200619151801488"></p><p>命令可以删除容器中的topic数据，还有zookeeper中的topic目录。</p><p>可以在zookeeper中查看目录是否已经删除掉了</p><p>进入zookeeper容器，在bin下运行./zkCli.sh</p><p>ls /kafka/brokers/topics</p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151812.png" srcset="/img/loading.gif" alt="image-20200619151811971"></p><p>还有一种暴力删除方法，因为我启动kafka容器的时候，没有外挂topic路径。所以我直接把容器删除掉，再重新启动一个新的容器也能实现topic的删除。（这种方式不推荐用）</p><p><strong>docker kafka 数据文件保存的路径：</strong></p><p>在配置文件service.config中配置的，log.dirs配置保存路径。</p><p>进入kafka容器,找到配置文件路径/opt/kafka_2.11-2.0.0/config</p><p>vi service.config</p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151824.png" srcset="/img/loading.gif" alt="image-20200619151824152"></p><p>默认配置在/kafka/kafka-logs-4eaa3ff7f59d下</p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/20200619151836.png" srcset="/img/loading.gif" alt="image-20200619151835562"></p>]]></content>
    
    
    <categories>
      
      <category>centos</category>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker常用指令</title>
    <link href="/posts/a8ae56b0.html"/>
    <url>/posts/a8ae56b0.html</url>
    
    <content type="html"><![CDATA[<h5 id="主要用法：docker-docker命令选项-子命令-子命令选项"><a href="#主要用法：docker-docker命令选项-子命令-子命令选项" class="headerlink" title="主要用法：docker  [ docker命令选项 ][ 子命令 ] [ 子命令选项 ]"></a>主要用法：<code>docker</code> [ <code>docker命令选项</code> ][ <code>子命令</code> ] [ <code>子命令选项</code> ]</h5><blockquote><p><code>docker</code> [ <code>子命令</code> ] <code>--help</code> 可查看每个子命令的详细用法。</p></blockquote><a id="more"></a><h3 id="docker命令选项列表"><a href="#docker命令选项列表" class="headerlink" title="docker命令选项列表"></a>docker命令选项列表</h3><hr><table><thead><tr><th>选项</th><th>说明</th><th>其他</th></tr></thead><tbody><tr><td>–config [string]</td><td>客户端本地配置文件路径</td><td>默认为 <code>~/.docker</code></td></tr><tr><td>-D, –debug</td><td>启用调试模式</td><td></td></tr><tr><td>–help</td><td>打印用法</td><td></td></tr><tr><td>-H, –host list</td><td>通过socket访问指定的docker守护进程(服务端)</td><td><code>unix://</code> , <code>fd://</code> , <code>tcp://</code></td></tr><tr><td>-l, –log-level [string]</td><td>设置日志级别 (<code>debug</code> 、<code>info</code> 、<code>warn</code> 、<code>error</code> 、<code>fatal</code>)</td><td>默认为 <code>info</code></td></tr><tr><td>–tls</td><td>启用TLS加密</td><td></td></tr><tr><td>–tlscacert [string]</td><td>指定信任的CA根证书路径</td><td>默认为 <code>~/.docker/ca.pem</code></td></tr><tr><td>–tlscert [string]</td><td>客户端证书路径</td><td>默认为 <code>~/.docker/cert.pem</code></td></tr><tr><td>–tlskey [string]</td><td>客户端证书私钥路径</td><td>默认为 <code>~/.docker/key.pem</code></td></tr><tr><td>–tlsverify</td><td>启用TLS加密并验证客户端证书</td><td></td></tr><tr><td>-v, –version</td><td>打印docker客户端版本信息</td><td></td></tr></tbody></table><h3 id="1-镜像仓库相关"><a href="#1-镜像仓库相关" class="headerlink" title="1. 镜像仓库相关"></a>1. 镜像仓库相关</h3><hr><h4 id="1-1-查找镜像"><a href="#1-1-查找镜像" class="headerlink" title="1.1 查找镜像"></a>1.1 查找镜像</h4><blockquote><p>docker search [条件]</p></blockquote><pre><code class="hljs routeros"><span class="hljs-comment"># 查询三颗星及以上名字包含alpine的镜像</span>docker search <span class="hljs-attribute">-f</span>=stars=3 alpine</code></pre><h4 id="1-2-获取镜像"><a href="#1-2-获取镜像" class="headerlink" title="1.2 获取镜像"></a>1.2 获取镜像</h4><blockquote><p>docker pull [仓库]:[tag]</p></blockquote><p>仓库格式为 <code>[仓库url]/[用户名]/[应用名]</code> , 除了官方仓库外的第三方仓库要指定url, 用户名就是在对应仓库下建立的账户, 一般只有应用名的仓库代表官方镜像, 如 <code>ubuntu</code>、<code>tomcat</code> 等, 而 <code>tag</code> 表示镜像的版本号, 不指定时默认为 <code>latest</code></p><pre><code class="hljs nginx"><span class="hljs-comment"># 获取alpine Linux 的镜像</span><span class="hljs-attribute">docker</span> pull alpine</code></pre><h4 id="1-3-推送镜像到仓库"><a href="#1-3-推送镜像到仓库" class="headerlink" title="1.3 推送镜像到仓库"></a>1.3 推送镜像到仓库</h4><blockquote><p>docker push [镜像名]:[tag]</p></blockquote><p>当然, 需要先登录</p><pre><code class="hljs routeros">ubuntu@VM-84-201-ubuntu:~$ docker push alpineThe push refers <span class="hljs-keyword">to</span> a repository [docker.io/library/alpine]3fb66f713c9f: Layer already existserrors:denied: requested access <span class="hljs-keyword">to</span> the<span class="hljs-built_in"> resource </span>is denied(没有权限, 需要登录帐号)unauthorized: authentication required</code></pre><h4 id="1-4-登录-退出第三方仓库"><a href="#1-4-登录-退出第三方仓库" class="headerlink" title="1.4 登录/退出第三方仓库"></a>1.4 登录/退出第三方仓库</h4><blockquote><p>docker [login/logout] [仓库地址]</p></blockquote><pre><code class="hljs angelscript"># 登录<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker login daocloud.ioUsername (username): usernamePassword:Login Succeeded# 退出<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker logout daocloud.ioRemoving login credentials <span class="hljs-keyword">for</span> daocloud.io</code></pre><h3 id="2-本地镜像"><a href="#2-本地镜像" class="headerlink" title="2. 本地镜像"></a>2. 本地镜像</h3><hr><h4 id="2-1-查看本地镜像"><a href="#2-1-查看本地镜像" class="headerlink" title="2.1 查看本地镜像"></a>2.1 查看本地镜像</h4><blockquote><p>docker images</p></blockquote><pre><code class="hljs angelscript"><span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEalpine              latest              a41a7446062d        <span class="hljs-number">14</span> hours ago        <span class="hljs-number">3.97</span>MBhello-world         latest              <span class="hljs-number">48</span>b5124b2768        <span class="hljs-number">4</span> months ago        <span class="hljs-number">1.84</span>kB</code></pre><h4 id="2-2-删除本地镜像"><a href="#2-2-删除本地镜像" class="headerlink" title="2.2 删除本地镜像"></a>2.2 删除本地镜像</h4><blockquote><p>docker rmi [镜像名 or 镜像id]</p></blockquote><p>如果用镜像id作为参数, 可以只输入前几位, 能唯一确定即可(可以同时删除多个镜像, 空格隔开)。此外, 如果该镜像启动了容器需要先删除容器。</p><pre><code class="hljs groovy">ubuntu<span class="hljs-meta">@VM</span><span class="hljs-number">-84</span><span class="hljs-number">-201</span>-<span class="hljs-string">ubuntu:</span>~$ docker rmi a41<span class="hljs-string">Untagged:</span> <span class="hljs-string">alpine:</span>latest<span class="hljs-string">Untagged:</span> alpine<span class="hljs-meta">@sha</span><span class="hljs-string">256:</span><span class="hljs-number">0</span>b94d1d1b5eb130dd0253374552445b39470653fb1a1ec2d81490948876e462c<span class="hljs-string">Deleted:</span> <span class="hljs-string">sha256:</span>a41a7446062d197dd4b21b38122dcc7b2399deb0750c4110925a7dd37c80f118<span class="hljs-string">Deleted:</span> <span class="hljs-string">sha256:</span><span class="hljs-number">3</span>fb66f713c9fa9debcdaa58bb9858bd04c17350d9614b7a250ec0ee527319e59</code></pre><h4 id="2-3-查看镜像详情"><a href="#2-3-查看镜像详情" class="headerlink" title="2.3 查看镜像详情"></a>2.3 查看镜像详情</h4><blockquote><p>docker inspect [镜像名 or 镜像id]</p></blockquote><pre><code class="hljs prolog">ubuntu@<span class="hljs-symbol">VM</span><span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker inspect a41[    &#123;        <span class="hljs-string">"Id"</span>: <span class="hljs-string">"sha256:a41a7446062d197dd4b21b38122dcc7b2399deb0750c4110925a7dd37c80f118"</span>,        <span class="hljs-string">"RepoTags"</span>: [            <span class="hljs-string">"alpine:latest"</span>        ],        <span class="hljs-string">"RepoDigests"</span>: [            <span class="hljs-string">"alpine@sha256:0b94d1d1b5eb130dd0253374552445b39470653fb1a1ec2d81490948876e462c"</span>        ],        <span class="hljs-string">"Parent"</span>: <span class="hljs-string">""</span>,        <span class="hljs-string">"Comment"</span>: <span class="hljs-string">""</span>,        <span class="hljs-string">"Created"</span>: <span class="hljs-string">"2017-05-25T23:33:22.029729271Z"</span>,        <span class="hljs-string">"Container"</span>: <span class="hljs-string">"19ee1cd90c07eb7b3c359aaec3706e269a871064cca47801122444cef51c5038"</span>,    ......        &#125;    &#125;]</code></pre><h4 id="2-4-打包本地镜像-使用压缩包来完成迁移"><a href="#2-4-打包本地镜像-使用压缩包来完成迁移" class="headerlink" title="2.4 打包本地镜像, 使用压缩包来完成迁移"></a>2.4 打包本地镜像, 使用压缩包来完成迁移</h4><blockquote><p>docker save [镜像名] &gt; [文件路径]</p></blockquote><pre><code class="hljs awk"><span class="hljs-comment"># 默认为文件流输出</span>docker save alpine &gt; <span class="hljs-regexp">/usr/</span>anyesu<span class="hljs-regexp">/docker/</span>alpine.img<span class="hljs-comment"># 或者使用 '-o' 选项指定输出文件路径</span>docker save -o <span class="hljs-regexp">/usr/</span>anyesu<span class="hljs-regexp">/docker/</span>alpine.img alpine</code></pre><h4 id="2-5-导入镜像压缩包"><a href="#2-5-导入镜像压缩包" class="headerlink" title="2.5 导入镜像压缩包"></a>2.5 导入镜像压缩包</h4><blockquote><p>docker load &lt; [文件路径]</p></blockquote><pre><code class="hljs angelscript"># 默认从标准输入读取<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker load &lt; /usr/anyesu/docker/alpine.img<span class="hljs-number">3f</span>b66f713c9f: Loading layer [==================================================&gt;]  <span class="hljs-number">4.221</span>MB/<span class="hljs-number">4.221</span>MBLoaded image: alpine:latest# 用 <span class="hljs-string">'-i'</span> 选项指定输入文件路径<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker load -i /usr/anyesu/docker/alpine.imgLoaded image: alpine:latestLoaded image ID: sha256:<span class="hljs-number">665f</span>fb03bfaea7d8b7472edc0a741b429267db249b1fcead457886e861eae25fLoaded image ID: sha256:a41a7446062d197dd4b21b38122dcc7b2399deb0750c4110925a7dd37c80f118</code></pre><h4 id="2-6-修改镜像tag"><a href="#2-6-修改镜像tag" class="headerlink" title="2.6 修改镜像tag"></a>2.6 修改镜像tag</h4><blockquote><p>docker tag [镜像名 or 镜像id] [新镜像名]:[新tag]</p></blockquote><pre><code class="hljs angelscript"><span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker tag a41 anyesu/alpine:<span class="hljs-number">1.0</span><span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEanyesu/alpine       <span class="hljs-number">1.0</span>                 a41a7446062d        <span class="hljs-number">15</span> hours ago        <span class="hljs-number">3.97</span>MBalpine              latest              a41a7446062d        <span class="hljs-number">15</span> hours ago        <span class="hljs-number">3.97</span>MBhello-world         latest              <span class="hljs-number">48</span>b5124b2768        <span class="hljs-number">4</span> months ago        <span class="hljs-number">1.84</span>kB</code></pre><h3 id="3-容器相关"><a href="#3-容器相关" class="headerlink" title="3. 容器相关"></a>3. 容器相关</h3><hr><h4 id="3-1-创建、启动容器并执行相应的命令"><a href="#3-1-创建、启动容器并执行相应的命令" class="headerlink" title="3.1 创建、启动容器并执行相应的命令"></a>3.1 创建、启动容器并执行相应的命令</h4><blockquote><p>docker run [参数] [镜像名 or 镜像id] [命令]</p></blockquote><p>如果没有指定命令是执行镜像默认的命令, 创建镜像的时候可设置。另外要注意的一点, 启动容器后要执行一个前台进程(就是能在控制台不断输出的, 如tomcat的catalina.sh)才能使容器保持运行状态, 否则, 命令执行完容器就关闭了, 比如下面这个例子。</p><pre><code class="hljs livecodeserver">ubuntu@VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker run hello-worldHello <span class="hljs-built_in">from</span> Docker!This message shows that your installation appears <span class="hljs-built_in">to</span> be working correctly.To generate this message, Docker took <span class="hljs-keyword">the</span> following steps: <span class="hljs-number">1.</span> The Docker client contacted <span class="hljs-keyword">the</span> Docker daemon. <span class="hljs-number">2.</span> The Docker daemon pulled <span class="hljs-keyword">the</span> <span class="hljs-string">"hello-world"</span> image <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> Docker Hub. <span class="hljs-number">3.</span> The Docker daemon created <span class="hljs-keyword">a</span> <span class="hljs-built_in">new</span> container <span class="hljs-built_in">from</span> that image which runs <span class="hljs-keyword">the</span>    executable that produces <span class="hljs-keyword">the</span> output you are currently reading. <span class="hljs-number">4.</span> The Docker daemon streamed that output <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> Docker client, which sent <span class="hljs-keyword">it</span>    <span class="hljs-built_in">to</span> your terminal.To <span class="hljs-keyword">try</span> something more ambitious, you can run <span class="hljs-keyword">an</span> Ubuntu container <span class="hljs-keyword">with</span>: $ docker run -<span class="hljs-keyword">it</span> ubuntu bashShare images, automate workflows, <span class="hljs-keyword">and</span> more <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> free Docker ID: <span class="hljs-keyword">https</span>://cloud.docker.com/For more examples <span class="hljs-keyword">and</span> ideas, visit: <span class="hljs-keyword">https</span>://docs.docker.com/engine/userguide/</code></pre><h4 id="run命令常用选项"><a href="#run命令常用选项" class="headerlink" title="run命令常用选项"></a>run命令常用选项</h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-d</td><td>后台运行容器, 并返回容器ID；不指定时, 启动后开始打印日志, <code>Ctrl + C</code> 退出命令同时会关闭容器</td></tr><tr><td>-i</td><td>以交互模式运行容器, 通常与 -t 同时使用；</td></tr><tr><td>-t</td><td>为容器重新分配一个伪输入终端, 通常与 -i 同时使用</td></tr><tr><td>–name “anyesu-container”</td><td>为容器指定一个别名, 不指定时随机生成</td></tr><tr><td>-h docker-anyesu</td><td>设置容器的主机名, 默认随机生成</td></tr><tr><td>–dns 8.8.8.8</td><td>指定容器使用的DNS服务器, 默认和宿主一致</td></tr><tr><td>-e docker_host=172.17.0.1</td><td>设置环境变量</td></tr><tr><td>–cpuset=”0-2” or –cpuset=”0,1,2”</td><td>绑定容器到指定CPU运行</td></tr><tr><td>-m 100M</td><td>设置容器使用内存最大值</td></tr><tr><td>–net bridge</td><td>指定容器的网络连接类型, 支持 <code>bridge</code> / <code>host</code> / <code>none</code> / <code>container</code> 四种类型</td></tr><tr><td>–ip 172.18.0.13</td><td>为容器分配固定ip(需要使用自定义网络)</td></tr><tr><td>–expose 8081 –expose 8082</td><td>开放一个端口或一组端口, 会覆盖镜像设置中开放的端口</td></tr><tr><td>-p [宿主机端口]:[容器内端口]</td><td>宿主机到容器的端口映射, 可指定宿主机的要监听的ip, 默认为 <code>0.0.0.0</code></td></tr><tr><td>-P</td><td>注意是大写的, 宿主机随机指定一组可用的端口映射容器 <code>expose</code> 的所有端口</td></tr><tr><td>-v [宿主机目录路径]:[容器内目录路径]</td><td>挂载宿主机的指定目录(或文件)到容器内的指定目录(或文件)</td></tr><tr><td>–add-host [主机名]:[ip]</td><td>为容器hosts文件追加host, 默认会在hosts文件最后追加 <code>[主机名]:[容器ip]</code></td></tr><tr><td>–volumes-from [其他容器名]</td><td>将其他容器的数据卷添加到此容器</td></tr><tr><td>–link [其他容器名]:[在该容器中的别名]</td><td>添加链接到另一个容器, 在本容器hosts文件中加入关联容器的记录, 效果类似于 <code>--add-host</code></td></tr></tbody></table><blockquote><p>单字符选项可以合并, 如 <code>-i -t</code> 可以合并为 <code>-it</code></p></blockquote><pre><code class="hljs angelscript"># 创建一个名为anyesu_net、网段为<span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>的网桥(docker默认创建的网段为<span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>)docker network create --subnet=<span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">16</span> anyesu_net# 创建并启动一个配置复杂的容器<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker run -d --name anyesu-container -h docker-anyesu --dns <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span> -e docker_host=<span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -e docker_host2=<span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span> --net anyesu_net --ip <span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span> --expose <span class="hljs-number">8081</span> --expose <span class="hljs-number">8082</span> -P -p <span class="hljs-number">8000</span>:<span class="hljs-number">8000</span> -p <span class="hljs-number">8001</span>:<span class="hljs-number">8001</span> -v /usr/anyesu:/usr/anyesu --add-host anyesu_host:<span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> tomcat:<span class="hljs-number">7</span><span class="hljs-number">912e6632161</span>de0783a057aa02380e676753f66cfb367ef1686d4d09cdc931659<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                                                                                         NAMES<span class="hljs-number">912e6632161</span>d        tomcat:<span class="hljs-number">7</span>              <span class="hljs-string">"catalina.sh run"</span>   <span class="hljs-number">6</span> seconds ago       Up <span class="hljs-number">5</span> seconds        <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">8000</span><span class="hljs-number">-8001</span>-&gt;<span class="hljs-number">8000</span><span class="hljs-number">-8001</span>/tcp, <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32783</span>-&gt;<span class="hljs-number">8080</span>/tcp, <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32782</span>-&gt;<span class="hljs-number">8081</span>/tcp, <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32781</span>-&gt;<span class="hljs-number">8082</span>/tcp   anyesu-container</code></pre><h4 id="3-2-查看运行中的容器"><a href="#3-2-查看运行中的容器" class="headerlink" title="3.2 查看运行中的容器"></a>3.2 查看运行中的容器</h4><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span></code></pre><p>加 <code>-a</code> 选项可查看所有的容器</p><h4 id="3-3-开启-停止-重启容器"><a href="#3-3-开启-停止-重启容器" class="headerlink" title="3.3 开启/停止/重启容器"></a>3.3 开启/停止/重启容器</h4><pre><code class="hljs sql"><span class="hljs-comment"># 关闭容器(发送SIGTERM信号,做一些'退出前工作',再发送SIGKILL信号)</span>docker <span class="hljs-keyword">stop</span> anyesu-<span class="hljs-keyword">container</span><span class="hljs-comment"># 强制关闭容器(默认发送SIGKILL信号, 加-s参数可以发送其他信号)</span>docker <span class="hljs-keyword">kill</span> anyesu-<span class="hljs-keyword">container</span><span class="hljs-comment"># 启动容器</span>docker <span class="hljs-keyword">start</span> anyesu-<span class="hljs-keyword">container</span><span class="hljs-comment"># 重启容器</span>docker restart anyesu-<span class="hljs-keyword">container</span></code></pre><h4 id="3-4-删除容器"><a href="#3-4-删除容器" class="headerlink" title="3.4 删除容器"></a>3.4 删除容器</h4><blockquote><p>docker rm [容器名 or 容器id]</p></blockquote><p>可以指定多个容器一起删除, 加 <code>-f</code> 选项可强制删除正在运行的容器</p><pre><code class="hljs angelscript"><span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker psCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                                                                                                         NAMESfd7a6c1ba0f0        tomcat              <span class="hljs-string">"catalina.sh run"</span>   <span class="hljs-number">20</span> seconds ago       Up <span class="hljs-number">18</span> seconds       <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32798</span>-&gt;<span class="hljs-number">8080</span>/tcp, <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32797</span>-&gt;<span class="hljs-number">8081</span>/tcp, <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32796</span>-&gt;<span class="hljs-number">8082</span>/tcp                                     musing_newton<span class="hljs-number">61941</span>bea1c87        tomcat              <span class="hljs-string">"catalina.sh run"</span>   About a minute ago   Up About a minute   <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">8000</span><span class="hljs-number">-8001</span>-&gt;<span class="hljs-number">8000</span><span class="hljs-number">-8001</span>/tcp, <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32795</span>-&gt;<span class="hljs-number">8080</span>/tcp, <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32794</span>-&gt;<span class="hljs-number">8081</span>/tcp, <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">32793</span>-&gt;<span class="hljs-number">8082</span>/tcp   anyesu-container<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker rm musing_newton anyesu-container -fmusing_newtonanyesu-container</code></pre><h4 id="3-5-查看容器详情"><a href="#3-5-查看容器详情" class="headerlink" title="3.5 查看容器详情"></a>3.5 查看容器详情</h4><blockquote><p>docker inspect [容器名 or 容器id]</p></blockquote><pre><code class="hljs axapta">docker inspect anyesu-<span class="hljs-keyword">container</span></code></pre><h4 id="3-6-查看容器中正在运行的进程"><a href="#3-6-查看容器中正在运行的进程" class="headerlink" title="3.6 查看容器中正在运行的进程"></a>3.6 查看容器中正在运行的进程</h4><blockquote><p>docker top [容器名 or 容器id]</p></blockquote><pre><code class="hljs groovy">ubuntu<span class="hljs-meta">@VM</span><span class="hljs-number">-84</span><span class="hljs-number">-201</span>-<span class="hljs-string">ubuntu:</span>~$ docker top anyesu-containerUID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                <span class="hljs-number">31769</span>               <span class="hljs-number">31752</span>               <span class="hljs-number">1</span>                   <span class="hljs-number">00</span>:<span class="hljs-number">26</span>               ?                   00:<span class="hljs-number">00</span>:<span class="hljs-number">03</span>            <span class="hljs-regexp">/docker-java-home/</span>jre<span class="hljs-regexp">/bin/</span>java -Djava.util.logging.config.file=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>conf<span class="hljs-regexp">/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -classpath /</span>usr<span class="hljs-regexp">/local/</span>tomcat<span class="hljs-regexp">/bin/</span>bootstrap.<span class="hljs-string">jar:</span><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin<span class="hljs-regexp">/tomcat-juli.jar -Dcatalina.base=/</span>usr<span class="hljs-regexp">/local/</span>tomcat -Dcatalina.home=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat -Djava.io.tmpdir=/</span>usr<span class="hljs-regexp">/local/</span>tomcat/temp org.apache.catalina.startup.Bootstrap start</code></pre><h4 id="3-7-将容器保存为镜像"><a href="#3-7-将容器保存为镜像" class="headerlink" title="3.7 将容器保存为镜像"></a>3.7 将容器保存为镜像</h4><blockquote><p>docker commit [容器名 or 容器id] [镜像名]:[tag]</p></blockquote><pre><code class="hljs angelscript"><span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker commit anyesu-container anyesu/tomcat:<span class="hljs-number">1.0</span>sha256:<span class="hljs-number">582f</span>cffd3209a2478e2179c9381a1ef67e0df9ba95aba713875c0857f5dae4e5<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEanyesu/tomcat       <span class="hljs-number">1.0</span>                 <span class="hljs-number">582f</span>cffd3209        <span class="hljs-number">2</span> seconds ago       <span class="hljs-number">334</span>MBalpine              latest              a41a7446062d        <span class="hljs-number">17</span> hours ago        <span class="hljs-number">3.97</span>MBtomcat              latest              <span class="hljs-number">3695</span>a0fe8320        <span class="hljs-number">2</span> days ago          <span class="hljs-number">334</span>MBhello-world         latest              <span class="hljs-number">48</span>b5124b2768        <span class="hljs-number">4</span> months ago        <span class="hljs-number">1.84</span>kB</code></pre><h4 id="3-8-使用Dockerfile构建镜像"><a href="#3-8-使用Dockerfile构建镜像" class="headerlink" title="3.8 使用Dockerfile构建镜像"></a>3.8 使用Dockerfile构建镜像</h4><blockquote><p>docker build -t [镜像名]:[tag] -f [DockerFile名] [DockerFile所在目录]</p></blockquote><p>数据是实时更新的, <a href="https://www.jianshu.com/p/a0892512f86c" target="_blank" rel="noopener">点击</a>查看详细用法</p><h3 id="4-硬件资源相关"><a href="#4-硬件资源相关" class="headerlink" title="4. 硬件资源相关"></a>4. 硬件资源相关</h3><hr><h4 id="4-1-显示容器硬件资源使用情况"><a href="#4-1-显示容器硬件资源使用情况" class="headerlink" title="4.1 显示容器硬件资源使用情况"></a>4.1 显示容器硬件资源使用情况</h4><blockquote><p>docker stats [选项] [0个或多个正在运行容器]</p></blockquote><pre><code class="hljs angelscript"># 不指定容器时显示所有正在运行的容器<span class="hljs-symbol">ubuntu@</span>VM<span class="hljs-number">-84</span><span class="hljs-number">-201</span>-ubuntu:~$ docker statsCONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS<span class="hljs-number">9</span>bb9d6bed6e6        <span class="hljs-number">0.00</span>%               <span class="hljs-number">20.57</span>MiB / <span class="hljs-number">864.5</span>MiB   <span class="hljs-number">2.38</span>%               <span class="hljs-number">104</span>kB / <span class="hljs-number">1.99</span>MB      <span class="hljs-number">4.9</span>MB / <span class="hljs-number">4.1</span>kB       <span class="hljs-number">11</span></code></pre><h4 id="4-2-更新容器的硬件资源限制"><a href="#4-2-更新容器的硬件资源限制" class="headerlink" title="4.2 更新容器的硬件资源限制"></a>4.2 更新容器的硬件资源限制</h4><blockquote><p>docker update [选项]</p></blockquote><p>这个操作可能会显示下面的内容</p><blockquote><p>Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap</p></blockquote><p><a href="https://link.jianshu.com?t=https://segmentfault.com/q/1010000002888521#a-1020000002890127" target="_blank" rel="noopener">解决办法</a></p><pre><code class="hljs vala"><span class="hljs-meta"># /etc/default/grub</span>sudo vi /etc/<span class="hljs-keyword">default</span>/grub<span class="hljs-meta"># 添加内核启动参数</span>GRUB_CMDLINE_LINUX=<span class="hljs-string">"...   cgroup_enable=memory swapaccount=1"</span><span class="hljs-meta"># 更新 grub</span>sudo update-grub<span class="hljs-meta"># 重启</span>sudo reboot</code></pre><p>注意是在 <code>GRUB_CMDLINE_LINUX</code> 项追加上述参数内容, 我试过简单粗暴的在文件末尾添加下面内容, 这么做会覆盖原有的启动参数, 导致网络连接失败。网络坏了, ssh都连不上了, 幸好可以在腾讯云的网页控制台登录, 修改内容重启就好了。所以呢, 这一步操作一定要慎重。</p><h4 id="4-3-使用压力测试工具-stress-验证效果"><a href="#4-3-使用压力测试工具-stress-验证效果" class="headerlink" title="4.3 使用压力测试工具 stress 验证效果"></a>4.3 使用压力测试工具 <code>stress</code> 验证效果</h4><p>使用已有的stress镜像 <a href="https://link.jianshu.com?t=https://hub.docker.com/r/progrium/stress" target="_blank" rel="noopener">progrium/stress</a>, 开两个终端, 在一个终端中执行下面命令</p><pre><code class="hljs angelscript">docker run -m <span class="hljs-number">100</span>m --rm -it progrium/stress --cpu <span class="hljs-number">2</span> --io <span class="hljs-number">1</span> --vm <span class="hljs-number">10</span> --vm-bytes <span class="hljs-number">9</span>M</code></pre><p>在另一个终端执行 <code>docker stats</code> 进行监控</p><pre><code class="hljs angelscript">CONTAINER           CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS<span class="hljs-number">9</span>eb0                <span class="hljs-number">88.42</span>%              <span class="hljs-number">92.22</span>MiB / <span class="hljs-number">100</span>MiB   <span class="hljs-number">92.22</span>%              <span class="hljs-number">0</span>B / <span class="hljs-number">0</span>B             <span class="hljs-number">1.65</span>MB / <span class="hljs-number">2.88</span>MB     <span class="hljs-number">14</span></code></pre><p>再开一个终端执行</p><pre><code class="hljs angelscript"># <span class="hljs-number">9</span>eb0为容器id开头, 请根据实际情况替换。内存限制只能调大不能调小docker update -m <span class="hljs-number">200</span>m <span class="hljs-number">9</span>eb0</code></pre><h5 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章:"></a>相关文章:</h5><ul><li><a href="https://link.jianshu.com?t=http://www.cnblogs.com/liuyansheng/p/6113512.html" target="_blank" rel="noopener">docker容器的参数如何指定配额</a></li><li><a href="https://link.jianshu.com?t=http://www.cnblogs.com/ilinuxer/p/6648681.html" target="_blank" rel="noopener">设置Docker容器中Java应用的内存限制</a></li><li><a href="https://link.jianshu.com?t=http://blog.csdn.net/candcplusplus/article/details/53728507" target="_blank" rel="noopener">Docker 运行时资源限制</a></li><li><a href="https://link.jianshu.com?t=http://blog.csdn.net/s1070/article/details/52301410" target="_blank" rel="noopener">Docker内存限制</a></li></ul><h3 id="基础子命令列表"><a href="#基础子命令列表" class="headerlink" title="基础子命令列表"></a>基础子命令列表</h3><hr><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>attach</td><td>进入运行中的容器, 显示该容器的控制台界面。注意, 从该指令退出会导致容器关闭</td></tr><tr><td>build</td><td>根据 Dockerfile 文件构建镜像</td></tr><tr><td>commit</td><td>提交容器所做的改为为一个新的镜像</td></tr><tr><td>cp</td><td>在容器和宿主机之间复制文件</td></tr><tr><td>create</td><td>根据镜像生成一个新的容器</td></tr><tr><td>diff</td><td>展示容器相对于构建它的镜像内容所做的改变</td></tr><tr><td>events</td><td>实时打印服务端执行的事件</td></tr><tr><td>exec</td><td>在已运行的容器中执行命令</td></tr><tr><td>export</td><td>导出容器到本地快照文件</td></tr><tr><td>history</td><td>显示镜像每层的变更内容</td></tr><tr><td>images</td><td>列出本地所有镜像</td></tr><tr><td>import</td><td>导入本地容器快照文件为镜像</td></tr><tr><td>info</td><td>显示 Docker 详细的系统信息</td></tr><tr><td>inspect</td><td>查看容器或镜像的配置信息, 默认为json数据</td></tr><tr><td>kill</td><td><code>-s</code> 选项向容器发送信号, 默认为SIGKILL信号(强制关闭)</td></tr><tr><td>load</td><td>导入镜像压缩包</td></tr><tr><td>login</td><td>登录第三方仓库</td></tr><tr><td>logout</td><td>退出第三方仓库</td></tr><tr><td>logs</td><td>打印容器的控制台输出内容</td></tr><tr><td>pause</td><td>暂停容器</td></tr><tr><td>port</td><td>容器端口映射列表</td></tr><tr><td>ps</td><td>列出正在运行的容器, <code>-a</code> 选项显示所有容器</td></tr><tr><td>pull</td><td>从镜像仓库拉取镜像</td></tr><tr><td>push</td><td>将镜像推送到镜像仓库</td></tr><tr><td>rename</td><td>重命名容器名</td></tr><tr><td>restart</td><td>重启容器</td></tr><tr><td>rm</td><td>删除已停止的容器, <code>-f</code> 选项可强制删除正在运行的容器</td></tr><tr><td>rmi</td><td>删除镜像(必须先删除该镜像构建的所有容器)</td></tr><tr><td>run</td><td>根据镜像生成并进入一个新的容器</td></tr><tr><td>save</td><td>打包本地镜像, 使用压缩包来完成迁移</td></tr><tr><td>search</td><td>查找镜像</td></tr><tr><td>start</td><td>启动关闭的容器</td></tr><tr><td>stats</td><td>显示容器对资源的使用情况(内存、CPU、磁盘等)</td></tr><tr><td>stop</td><td>关闭正在运行的容器</td></tr><tr><td>tag</td><td>修改镜像tag</td></tr><tr><td>top</td><td>显示容器中正在运行的进程(相当于容器内执行 <code>ps -ef</code> 命令)</td></tr><tr><td>unpause</td><td>恢复暂停的容器</td></tr><tr><td>update</td><td>更新容器的硬件资源限制(内存、CPU等)</td></tr><tr><td>version</td><td>显示docker客户端和服务端版本信息</td></tr><tr><td>wait</td><td>阻塞当前命令直到对应的容器被关闭, 容器关闭后打印结束代码</td></tr><tr><td>daemon</td><td>这个子命令已过期, 将在Docker 17.12之后的版本中移出, 直接使用dockerd</td></tr></tbody></table><h3 id="用于管理的子命令列表"><a href="#用于管理的子命令列表" class="headerlink" title="用于管理的子命令列表"></a>用于管理的子命令列表</h3><hr><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>container</td><td>管理容器</td></tr><tr><td>image</td><td>管理镜像</td></tr><tr><td>network</td><td>管理容器网络(默认为bridge、host、none三个网络配置)</td></tr><tr><td>plugin</td><td>管理插件</td></tr><tr><td>system</td><td>管理系统资源。其中, <code>docker system prune</code> 命令用于清理没有使用的镜像, 容器, 数据卷以及网络</td></tr><tr><td>volume</td><td>管理数据卷</td></tr><tr><td>swarm</td><td>管理Swarm模式</td></tr><tr><td>service</td><td>管理Swarm模式下的服务</td></tr><tr><td>node</td><td>管理Swarm模式下的docker集群中的节点</td></tr><tr><td>secret</td><td>管理Swarm模式下的敏感数据</td></tr><tr><td>stack</td><td>Swarm模式下利用compose-file管理服务</td></tr></tbody></table><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>其中 <code>container</code> 、<code>image</code> 、<code>system</code> 一般用前面的简化指令即可。<code>Swarm</code> 模式用来管理docker集群, 它将一群Docker宿主机变成一个单一的虚拟的主机, 实现对多台物理机的集群管理。</p><ul><li><a href="https://link.jianshu.com?t=https://my.oschina.net/tantexian/blog/785740" target="_blank" rel="noopener">初试Docker swarm命令</a></li><li><a href="https://link.jianshu.com?t=https://yq.aliyun.com/articles/91396" target="_blank" rel="noopener">优雅地实现安全的容器编排 - Docker Secrets</a></li><li><a href="https://link.jianshu.com?t=https://segmentfault.com/a/1190000008469023" target="_blank" rel="noopener">解读1.13.1 | 探究Docker Stack和可对接网络</a></li></ul><h3 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a><a href="https://www.jianshu.com/nb/13876015" target="_blank" rel="noopener">系列文章</a></h3><p><a href="https://www.jianshu.com/p/74f29cf5a999" target="_blank" rel="noopener">Docker 学习总结</a></p><p><a href="https://www.jianshu.com/p/a0892512f86c" target="_blank" rel="noopener">使用Dockerfile构建镜像</a></p><p><a href="https://www.jianshu.com/p/ee8e7d2eb645" target="_blank" rel="noopener">使用Docker-compose构建容器</a></p><p><a href="https://www.jianshu.com/p/7ba1a93e6de4" target="_blank" rel="noopener">Docker Daemon连接方式详解</a></p><p><a href="https://www.jianshu.com/p/f510aaa470cc" target="_blank" rel="noopener">Docker下的网络模式</a></p>]]></content>
    
    
    <categories>
      
      <category>centos</category>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>openldap logrotate切割日志</title>
    <link href="/posts/e73a6447.html"/>
    <url>/posts/e73a6447.html</url>
    
    <content type="html"><![CDATA[<p>编辑/etc/rsyslog.conf ，加入以下内容，将日志保存在以下路径</p><pre><code class="hljs lasso">local4.*           /<span class="hljs-built_in">var</span>/<span class="hljs-keyword">log</span>/ldap/openldap.<span class="hljs-keyword">log</span></code></pre><p>重启rsyslog服务</p><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/rsyslog  restart</span></code></pre><p>由于openldap日志会越来越大，所以需要logrotate进行日志切割。</p><p>创建一个配置文件</p><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>logrotate.d<span class="hljs-regexp">/slapd</span></code></pre><p>内容如下</p><pre><code class="hljs dts"> <span class="hljs-meta-keyword">/var/</span>log<span class="hljs-meta-keyword">/ldap/</span>openldap.<span class="hljs-class">log </span>&#123;    daily         <span class="hljs-meta">#每天轮询一次日志</span>    rotate <span class="hljs-number">5</span>      <span class="hljs-meta">#存储5个日志，超过该数目后的日志将被删除</span>    copytruncate  <span class="hljs-meta">#复制原日志内容后，将原日志清空，而不创建新文件</span>    nocompress    <span class="hljs-meta">#切割时不压缩</span>    dateext       <span class="hljs-meta">#切割时文件名带有日期</span>    missingok     <span class="hljs-meta">#如果指定的目录不存在，logrotate会报错，此项用来关闭报错</span>&#125;</code></pre><p>测试配置是否有问题</p><pre><code class="hljs awk">logrotate -f <span class="hljs-regexp">/etc/</span>logrotate.d<span class="hljs-regexp">/slapd</span></code></pre><p>更过参数参考：</p><pre><code class="hljs routeros">参数 功能compress 通过gzip 压缩转储以后的日志nocompress 不需要压缩时，用这个参数copytruncate 用于还在打开中的日志文件，把当前日志备份并截断nocopytruncate 备份日志文件但是不截断create mode owner<span class="hljs-built_in"> group </span>转储文件，使用指定的文件模式创建新的日志文件nocreate 不建立新的日志文件delaycompress 和 compress 一起使用时，转储的日志文件到下一次转储时才压缩nodelaycompress 覆盖 delaycompress 选项，转储同时压缩。errors<span class="hljs-built_in"> address </span>专储时的错误信息发送到指定的Email 地址ifempty 即使是空文件也转储，这个是 logrotate 的缺省选项。notifempty 如果是空文件的话，不转储mail<span class="hljs-built_in"> address </span>把转储的日志文件发送到指定的E-mail 地址nomail 转储时不发送日志文件olddir directory 转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统noolddir 转储后的日志文件和当前日志文件放在同一个目录下prerotate/endscript 在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行postrotate/endscript 在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行daily 指定转储周期为每天weekly 指定转储周期为每周monthly 指定转储周期为每月rotate count 指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份tabootext [+] list 让logrotate 不转储指定扩展名的文件，缺省的扩展名是：.rpm-orig, .rpmsave, v, 和 ~ size size 当日志文件到达指定的大小时才转储，Size 可以指定 bytes (缺省)以及KB (sizek)或者MB (sizem).</code></pre>]]></content>
    
    
    <categories>
      
      <category>centos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openldap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>firewalld对指定IP开放指定端口的配置</title>
    <link href="/posts/d7a36c9d.html"/>
    <url>/posts/d7a36c9d.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-打开firewalld防火墙"><a href="#1-打开firewalld防火墙" class="headerlink" title="1.打开firewalld防火墙"></a>1.打开<a href="https://www.centos.bz/tag/firewalld/" target="_blank" rel="noopener">firewalld</a>防火墙</h1><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> firewalld.service</code></pre><h1 id="2-添加防火墙规则（对指定ip开放指定端口）"><a href="#2-添加防火墙规则（对指定ip开放指定端口）" class="headerlink" title="2.添加防火墙规则（对指定ip开放指定端口）"></a>2.添加防火墙规则（对指定ip开放指定端口）</h1><pre><code class="hljs routeros"><span class="hljs-comment">#（1） Postgresql端口设置。允许192.168.142.166访问5432端口</span>firewall-cmd --permanent <span class="hljs-attribute">--add-rich-rule</span>=<span class="hljs-string">"rule family="</span>ipv4" source <span class="hljs-attribute">address</span>=<span class="hljs-string">"192.168.142.166"</span><span class="hljs-built_in"> port </span><span class="hljs-attribute">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">"5432"</span> accept<span class="hljs-string">"</span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">#（2）redis端口设置。允许192.168.142.166访问6379端口</span><span class="hljs-string"></span><span class="hljs-string">firewall-cmd --permanent --add-rich-rule="</span>rule <span class="hljs-attribute">family</span>=<span class="hljs-string">"ipv4"</span> source <span class="hljs-attribute">address</span>=<span class="hljs-string">"192.168.142.166"</span><span class="hljs-built_in"> port </span><span class="hljs-attribute">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">"6379"</span> accept<span class="hljs-string">"</span><span class="hljs-string"></span><span class="hljs-string">#（3）beanstalkd端口设置。允许192.168.142.166访问11300端口</span><span class="hljs-string"></span><span class="hljs-string">firewall-cmd --permanent --add-rich-rule="</span>rule <span class="hljs-attribute">family</span>=<span class="hljs-string">"ipv4"</span> source <span class="hljs-attribute">address</span>=<span class="hljs-string">"192.168.142.166"</span><span class="hljs-built_in"> port </span><span class="hljs-attribute">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">"11300"</span> accept<span class="hljs-string">"</span></code></pre><h1 id="3-重启防火墙，使配置生效"><a href="#3-重启防火墙，使配置生效" class="headerlink" title="3.重启防火墙，使配置生效"></a>3.重启防火墙，使配置生效</h1><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">firewalld</span><span class="hljs-selector-class">.service</span></code></pre><h1 id="4-查看配置结果，验证配置"><a href="#4-查看配置结果，验证配置" class="headerlink" title="4.查看配置结果，验证配置"></a>4.查看配置结果，验证配置</h1><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --list-all</span></code></pre><h1 id="5-删除规则"><a href="#5-删除规则" class="headerlink" title="5.删除规则"></a>5.删除规则</h1><p>示例：</p><pre><code class="hljs routeros">firewall-cmd --permanent <span class="hljs-attribute">--remove-rich-rule</span>=<span class="hljs-string">"rule family="</span>ipv4" source <span class="hljs-attribute">address</span>=<span class="hljs-string">"192.168.142.166"</span><span class="hljs-built_in"> port </span><span class="hljs-attribute">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">"11300"</span> accept<span class="hljs-string">"</span><span class="hljs-string">systemctl restart firewalld.service</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>centos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 6.5 无界面安装 Oracle 11g R2</title>
    <link href="/posts/d2b81ce5.html"/>
    <url>/posts/d2b81ce5.html</url>
    
    <content type="html"><![CDATA[<p>系统环境基于无外网和无图形化界面安装Oracle 11G。<a id="more"></a></p><h2 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h2><ul><li><p>XShell+Xftp：用于连接Linux系统的终端模拟工具和FTP传输工具</p></li><li><p>Oracle安装文件下载（Oracle Database 11g Release 2安装包文件总大小约2G）：<br><a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html</a><br>下载完毕后会有两个文件（我所安装的Linux服务器是64位）：</p><pre><code class="hljs css"><span class="hljs-selector-tag">linux</span><span class="hljs-selector-class">.x64_11gR2_database_1of1</span><span class="hljs-selector-class">.zip</span></code></pre><pre><code class="hljs css"><span class="hljs-selector-tag">linux</span><span class="hljs-selector-class">.x64_11gR2_database_2of2</span><span class="hljs-selector-class">.zip</span></code></pre></li></ul><h2 id="检查系统配置"><a href="#检查系统配置" class="headerlink" title="检查系统配置"></a>检查系统配置</h2><p>Oracle Database 11g Release 2官方的系统配置要求如下：</p><ul><li>物理运行内存（Physical RAM）：1GB以上，推荐配置2GB以上<br>查看内存占用情况：<pre><code class="hljs cpp"><span class="hljs-built_in">free</span> -g</code></pre></li><li>硬盘空间（Disk Space）：8GB以上，/tmp目录剩余空间在1GB以上<br>查看其他挂载区的目录使用情况：<pre><code class="hljs ebnf"><span class="hljs-attribute">df -h</span></code></pre></li><li>查看目录的剩余空间：</li></ul><pre><code class="hljs jboss-cli">df -kh <span class="hljs-string">/tmp</span></code></pre><ul><li>查看系统当前的版本：<pre><code class="hljs ebnf"><span class="hljs-attribute">lsb_release -a</span></code></pre></li><li>查看系统对应的版本和位数：<pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /proc/<span class="hljs-keyword">version</span></code></pre></li></ul><p>我所安装的服务器环境是 Red Hat Enterprise Linux 4</p><h2 id="系统安装Oracle-11g-R2所必须的安装包"><a href="#系统安装Oracle-11g-R2所必须的安装包" class="headerlink" title="系统安装Oracle 11g R2所必须的安装包"></a>系统安装Oracle 11g R2所必须的安装包</h2><pre><code class="hljs angelscript">binutils<span class="hljs-number">-2.15</span><span class="hljs-number">.92</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>compat-libstdc++<span class="hljs-number">-33</span><span class="hljs-number">-3.2</span><span class="hljs-number">.3</span>elfutils-libelf<span class="hljs-number">-0.97</span>elfutils-libelf-devel<span class="hljs-number">-0.97</span>expat<span class="hljs-number">-1.95</span><span class="hljs-number">.7</span>gcc<span class="hljs-number">-3.4</span><span class="hljs-number">.6</span>gcc-c++<span class="hljs-number">-3.4</span><span class="hljs-number">.6</span>glibc<span class="hljs-number">-2.3</span><span class="hljs-number">.4</span><span class="hljs-number">-2.41</span>glibc-common<span class="hljs-number">-2.3</span><span class="hljs-number">.4</span>glibc-devel<span class="hljs-number">-2.3</span><span class="hljs-number">.4</span>glibc-headers<span class="hljs-number">-2.3</span><span class="hljs-number">.4</span>libaio<span class="hljs-number">-0.3</span><span class="hljs-number">.105</span>libaio-devel<span class="hljs-number">-0.3</span><span class="hljs-number">.105</span>libgcc<span class="hljs-number">-3.4</span><span class="hljs-number">.6</span>libstdc++<span class="hljs-number">-3.4</span><span class="hljs-number">.6</span>libstdc++-devel3<span class="hljs-number">.4</span><span class="hljs-number">.6</span>make<span class="hljs-number">-3.80</span>numactl<span class="hljs-number">-0.6</span><span class="hljs-number">.4</span>.x86_64pdksh<span class="hljs-number">-5.2</span><span class="hljs-number">.14</span>sysstat<span class="hljs-number">-5.0</span><span class="hljs-number">.5</span></code></pre><ul><li><p>查询系统安装软件是否缺失：</p><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span>|<span class="hljs-keyword">grep</span> 软件包名</code></pre><p>我所安装Oracle的服务器不能连接外网，只能通过下载安装包用FTP传输到服务器上安装，以上安装包缺失可以到一下地址查找：<br><a href="http://vault.centos.org/6.5/os/x86_64/Packages/" target="_blank" rel="noopener">http://vault.centos.org/6.5/os/x86_64/Packages/</a></p></li><li><p>安装软件命令(具体安装顺序自己调配，不能用通配符批量安装，会出现依赖问题)：</p><pre><code class="hljs css"><span class="hljs-selector-tag">rpm</span> <span class="hljs-selector-tag">-ivh</span> 软件名<span class="hljs-selector-class">.rpm</span></code></pre><h2 id="配置内核参数和资源限制"><a href="#配置内核参数和资源限制" class="headerlink" title="配置内核参数和资源限制"></a>配置内核参数和资源限制</h2><p>使用vi编辑器对/etc/sysctl.conf文件进行编辑：</p><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/sysctl.<span class="hljs-keyword">conf</span></code></pre><p>文件末尾添加一下内容：</p></li></ul><pre><code class="hljs ini"><span class="hljs-attr">fs.aio-max-nr</span> = <span class="hljs-number">1048576</span><span class="hljs-attr">fs.file-max</span> = <span class="hljs-number">6815744</span><span class="hljs-attr">kernel.shmall</span> = <span class="hljs-number">2097152</span><span class="hljs-attr">kernel.shmmax</span> = <span class="hljs-number">536870912</span><span class="hljs-attr">kernel.shmmni</span> = <span class="hljs-number">4096</span><span class="hljs-attr">kernel.sem</span> = <span class="hljs-number">250</span> <span class="hljs-number">32000</span> <span class="hljs-number">100</span> <span class="hljs-number">128</span><span class="hljs-attr">net.ipv4.ip_local_port_range</span> = <span class="hljs-number">9000</span> <span class="hljs-number">65500</span><span class="hljs-attr">net.core.rmem_default</span> = <span class="hljs-number">262144</span><span class="hljs-attr">net.core.rmem_max</span> = <span class="hljs-number">4194304</span><span class="hljs-attr">net.core.wmem_default</span> = <span class="hljs-number">262144</span><span class="hljs-attr">net.core.wmem_max</span> = <span class="hljs-number">1048576</span></code></pre><ul><li><p>使内核参数生效，执行命令:</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sysctl -p</span></code></pre><h2 id="创建Oracle相关用户"><a href="#创建Oracle相关用户" class="headerlink" title="创建Oracle相关用户"></a>创建Oracle相关用户</h2></li><li><p>创建用户组oinstall：</p><pre><code class="hljs angelscript">groupadd -g <span class="hljs-number">200</span> oinstall</code></pre></li><li><p>创建用户组dba：</p><pre><code class="hljs angelscript">groupadd -g <span class="hljs-number">201</span> dba</code></pre></li><li><p>创建oracle用户并指定用户组和Oracle用户的用户目录：</p><pre><code class="hljs angelscript">useradd -u <span class="hljs-number">440</span> -g oinstall -G dba -d /home/oracle oracle</code></pre></li><li><p>更改Oracle用户的用户登录密码：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">passwd oracle</span></code></pre></li></ul><h2 id="修改登录系统参数"><a href="#修改登录系统参数" class="headerlink" title="修改登录系统参数"></a>修改登录系统参数</h2><ul><li>使用vi编辑器对/etc/pam.d/login文件进行编辑：<pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>pam.d<span class="hljs-regexp">/login</span></code></pre>在文件末尾添加:<pre><code class="hljs css"><span class="hljs-selector-tag">session</span> <span class="hljs-selector-tag">required</span> <span class="hljs-selector-tag">pam_limits</span><span class="hljs-selector-class">.so</span></code></pre></li></ul><h2 id="修改Oracle软件安装用户的资源限制"><a href="#修改Oracle软件安装用户的资源限制" class="headerlink" title="修改Oracle软件安装用户的资源限制"></a>修改Oracle软件安装用户的资源限制</h2><ul><li>使用vi编辑器对/etc/security/limits.conf文件进行编辑：<pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/security/limits.<span class="hljs-keyword">conf</span></code></pre>在文件末尾添加:</li></ul><pre><code class="hljs angelscript">oracle soft nproc <span class="hljs-number">2047</span>oracle hard nproc <span class="hljs-number">16384</span>oracle soft nofile <span class="hljs-number">1024</span>oracle hard nofile <span class="hljs-number">65536</span></code></pre><h2 id="修改环境变量文件"><a href="#修改环境变量文件" class="headerlink" title="修改环境变量文件"></a>修改环境变量文件</h2><ul><li>使用vi编辑器对/etc/profile文件进行编辑：<pre><code class="hljs routeros">vi /etc/profile在文件末尾添加：<span class="hljs-keyword">if</span> [ <span class="hljs-variable">$USER</span> = <span class="hljs-string">"oracle"</span> ]; then<span class="hljs-keyword">if</span> [ <span class="hljs-variable">$SHELL</span> = <span class="hljs-string">"/bin/ksh"</span> ]; thenulimit -p 16384ulimit -n 65536<span class="hljs-keyword">else</span>ulimit -u 16384 -n 65536fifi</code></pre></li><li>更新配置文件更改：<pre><code class="hljs vim"><span class="hljs-keyword">source</span> <span class="hljs-keyword">profile</span></code></pre><h2 id="创建目录并分配权限"><a href="#创建目录并分配权限" class="headerlink" title="创建目录并分配权限"></a>创建目录并分配权限</h2></li><li>创建目录</li></ul><pre><code class="hljs arduino"><span class="hljs-built_in">mkdir</span> /oracle</code></pre><ul><li>授权目录给当前用户/其他用户/用户组 可读可写可执行</li></ul><pre><code class="hljs angelscript">chmod -R <span class="hljs-number">775</span> /oracle</code></pre><pre><code class="hljs groovy">chown -R <span class="hljs-string">oracle:</span>oinstall /oracle</code></pre><ul><li>切换到oracle帐号并添加oracle用户下面的环境变量：</li></ul><pre><code class="hljs ebnf"><span class="hljs-attribute">su - oracle</span></code></pre><ul><li>使用vi编辑器对用户目录下.bash_profile文件进行编辑：</li></ul><pre><code class="hljs jboss-cli">vi ~<span class="hljs-string">/.bash_profile</span></code></pre><p>在.base_profile里面添加如下内容（有些内容存在就不用加，对照着修改）<br>ORACLE_HOME在配置时注意后面不要带有:分隔符，否则PATH会取不到；<br>ORACLE_HOME的路径；<br>ORACLE_SID是对应后面创建数据库SID的，可以随时更改；<br>以下是配置内容：</p><pre><code class="hljs routeros"><span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HOME/binumask 022<span class="hljs-builtin-name">export</span> PATH<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">ORACLE_BASE</span>=/oracle<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">ORACLE_SID</span>=orcl<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">ORACLE_HOME</span>=<span class="hljs-variable">$ORACLE_BASE</span>/product/11.2.0/dbhome_1<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$ORACLE_HOME/bin:</code></pre><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><ul><li><p>Ctrl+D注销Oracle用户，切换成root用户</p></li><li><p>解压Oracle 11g R2 数据库压缩包（在本文我已经把数据库压缩包用FTP软件传输到/tmp目录下），执行命令：</p><pre><code class="hljs properties"><span class="hljs-attr">cd</span> <span class="hljs-string">/tmp</span><span class="hljs-attr">unzip</span> <span class="hljs-string">linux.x64_11gR2_database_1of2.zip</span><span class="hljs-attr">unzip</span> <span class="hljs-string">linux.x64_11gR2_database_2of2.zip</span></code></pre></li><li><p>拷贝database/response/下面的dbca.rsp、db_install.rsp及netca.rsp三个文件至/home/oracle目录中：</p><pre><code class="hljs dts">cp database<span class="hljs-meta-keyword">/response/</span>dbca.rsp <span class="hljs-meta-keyword">/home/</span>oracle/cp database<span class="hljs-meta-keyword">/response/</span>db_install.rsp <span class="hljs-meta-keyword">/home/</span>oracle/cp database<span class="hljs-meta-keyword">/response/</span>netca.rsp <span class="hljs-meta-keyword">/home/</span>oracle/chmod <span class="hljs-number">777</span> <span class="hljs-meta-keyword">/home/</span>oracle/dbca.rsp</code></pre></li><li><p>使用vi编辑数据库安装的配置文件db_install.rsp：</p></li></ul><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/home/oracle</span>vi db_install.rsp</code></pre><p>修改如下参数:</p><pre><code class="hljs ini"><span class="hljs-attr">Oracle.install.option</span>=INSTALL_DB_SWONLY<span class="hljs-attr">ORACLE_HOSTNAME</span>= master<span class="hljs-attr">UNIX_GROUP_NAME</span>=oinstall<span class="hljs-attr">INVENTORY_LOCATION</span>=/oracle/oraInventory<span class="hljs-attr">SELECTED_LANGUAGES</span>=en,zh_CN<span class="hljs-attr">ORACLE_HOME</span>=/oracle/product/<span class="hljs-number">11.2</span>.<span class="hljs-number">0</span>/dbhome_1<span class="hljs-attr">ORACLE_BASE</span>=/oracle<span class="hljs-attr">Oracle.install.db.InstallEdition</span>=EE<span class="hljs-attr">Oracle.install.db.DBA_GROUP</span>=dba<span class="hljs-attr">Oracle.install.db.OPER_GROUP</span>=oinstall<span class="hljs-attr">Oracle.install.db.config.starterdb.type</span>=GENERAL_PURPOSE<span class="hljs-attr">Oracle.install.db.config.starterdb.globalDBName</span>=orcl<span class="hljs-attr">Oracle.install.db.config.starterdb.SID</span>=orcl<span class="hljs-attr">Oracle.install.db.config.starterdb.characterSet</span>=ZHS16GBK<span class="hljs-attr">Oracle.install.db.config.starterdb.password.ALL</span>=oracle<span class="hljs-attr">DECLINE_SECURITY_UPDATES</span>=<span class="hljs-literal">true</span></code></pre><ul><li><p>切换到oracle 帐号，创建oraInventory目录：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">su - oracle</span></code></pre><pre><code class="hljs arduino"><span class="hljs-built_in">mkdir</span> /oracle/oraInventory</code></pre></li><li><p>切换到刚才解压的Oracle安装文件根目录中：</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/tmp/database</span></code></pre></li><li><p>开始执行安装操作：</p><pre><code class="hljs awk">.<span class="hljs-regexp">/runInstaller -silent -ignorePrereq -responseFile /</span>home<span class="hljs-regexp">/oracle/</span>db_install.rsp</code></pre><p>在/oracle/oraInventory/logs/可以查看对应的安装日志文件。</p></li><li><p>上述执行成功会提示执行两个脚本<br>Ctrl+D注销Oracle用户，切换成root用户<br>执行orainstRoot.sh及root.sh两脚本：</p><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /oracle/oraInventory<span class="hljs-keyword">sh</span> orainstRoot.<span class="hljs-keyword">sh</span><span class="hljs-keyword">cd</span> /oracle/product/11.2.0/dbhome_1<span class="hljs-keyword">sh</span> root.<span class="hljs-keyword">sh</span></code></pre></li><li><p>切换成oracle用户：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">su - oracle</span></code></pre></li><li><p>安装监听,直接执行监听脚本:</p><pre><code class="hljs jboss-cli">netca <span class="hljs-string">/silent</span> <span class="hljs-string">/responseFile</span> <span class="hljs-string">/home/oracle/netca.rsp</span></code></pre><h2 id="安装数据库实例"><a href="#安装数据库实例" class="headerlink" title="安装数据库实例"></a>安装数据库实例</h2></li><li><p>使用vi编辑配置文件dbca.rsp：</p><pre><code class="hljs css"><span class="hljs-selector-tag">vi</span> <span class="hljs-selector-tag">dbca</span><span class="hljs-selector-class">.rsp</span></code></pre><p>修改以下配置，后面5个都要删掉前面的#号改参数值:</p><pre><code class="hljs ini"><span class="hljs-attr">GDBNAME</span>=<span class="hljs-string">"orcl"</span><span class="hljs-attr">SID</span>=<span class="hljs-string">"orcl"</span><span class="hljs-attr">DATAFILEDESTINATION</span>=<span class="hljs-string">"/oracle/oradata"</span><span class="hljs-attr">RECOVERYAREADESTINATION</span>=<span class="hljs-string">"/oracle/flash_recovery_area"</span><span class="hljs-attr">CHARACTERSET</span>=<span class="hljs-string">"ZHS16GBK"</span><span class="hljs-attr">TOTALMEMORY</span>=<span class="hljs-string">"800"</span><span class="hljs-attr">SYSPASSWORD</span> = <span class="hljs-string">"password"</span><span class="hljs-attr">SYSTEMPASSWORD</span> = <span class="hljs-string">"password"</span></code></pre><p>上面配置注意去掉#,不然是注释不生效<br>SYSPASSWORD和SYSTEMPASSWORD是sys和system数据库用户的默认密码（自己自行设置），不设置密码无法安装实例，显示终端一直滚动换行。</p></li><li><p>静默模式建实例（确保在oracle用户下执行）:</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~dbca -silent -responseFile ~<span class="hljs-string">/dbca.rsp</span></code></pre><p>如果出现<code>Set DISPLAY environment variable, then re-run.</code> 错误</p></li></ul><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DISPLAY</span>=:1.0</code></pre><p>然后在执行</p><p>另外：删除数据库实例方法，更改以上配置文件中的OPERATION_TYPE,默认为createDatabase，变更为一下内容：</p><pre><code class="hljs ini"><span class="hljs-attr">OPERATION_TYPE</span> = <span class="hljs-string">"deleteDatabase"</span></code></pre><p>执行命令：</p><pre><code class="hljs jboss-cli">dbca -silent -responseFile ~<span class="hljs-string">/dbca.rsp</span></code></pre><h2 id="测试和修改Oracle用户密码有效期"><a href="#测试和修改Oracle用户密码有效期" class="headerlink" title="测试和修改Oracle用户密码有效期"></a>测试和修改Oracle用户密码有效期</h2><ul><li><p>执行命令：</p><pre><code class="hljs jboss-cli">sqlplus <span class="hljs-string">/nolog</span></code></pre></li><li><p>SQLPlus：<br>以sysdba身份登录：</p><pre><code class="hljs actionscript">conn / <span class="hljs-keyword">as</span> sysdba</code></pre><p>查询用户密码有效时间：</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> dba_profiles s <span class="hljs-keyword">WHERE</span> s.profile=<span class="hljs-string">'DEFAULT'</span> <span class="hljs-keyword">AND</span> resource_name=<span class="hljs-string">'PASSWORD_LIFE_TIME'</span>;</code></pre><p>修改有效时间为不限制：</p><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> PROFILE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">LIMIT</span> PASSWORD_LIFE_TIME <span class="hljs-keyword">UNLIMITED</span>;</code></pre></li></ul><h2 id="附上一些命令查看Oracle端口和Oracle进程"><a href="#附上一些命令查看Oracle端口和Oracle进程" class="headerlink" title="附上一些命令查看Oracle端口和Oracle进程"></a>附上一些命令查看Oracle端口和Oracle进程</h2><ul><li><p>查看Oracle开放的1521端口号：</p><pre><code class="hljs 1c">netstat -lnp<span class="hljs-string">|grep 1521</span></code></pre></li><li><p>查看oracle进程：</p><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> oracle</code></pre></li></ul><p>参考文章：<br><a href="http://docs.oracle.com/cd/E11882_01/install.112/e24326/toc.htm#CEGIHDBF" target="_blank" rel="noopener">http://docs.oracle.com/cd/E11882_01/install.112/e24326/toc.htm#CEGIHDBF</a><br><a href="http://haowen.blog.51cto.com/3486731/1599042" target="_blank" rel="noopener">http://haowen.blog.51cto.com/3486731/1599042</a><br><a href="https://zhuanlan.zhihu.com/p/22600543?utm_source=qq&amp;utm_medium=social" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22600543?utm_source=qq&amp;utm_medium=social</a></p>]]></content>
    
    
    <categories>
      
      <category>centos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker下安装Elasticsearch</title>
    <link href="/posts/846203f2.html"/>
    <url>/posts/846203f2.html</url>
    
    <content type="html"><![CDATA[<h1 id="1、查找elasticsearch版本"><a href="#1、查找elasticsearch版本" class="headerlink" title="1、查找elasticsearch版本"></a>1、查找elasticsearch版本</h1><pre><code class="hljs undefined">docker search elasticsearch</code></pre><h1 id="2、选择一个版本，拉取镜像（本次拉取是2-4-6）"><a href="#2、选择一个版本，拉取镜像（本次拉取是2-4-6）" class="headerlink" title="2、选择一个版本，拉取镜像（本次拉取是2.4.6）"></a>2、选择一个版本，拉取镜像（本次拉取是2.4.6）</h1><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">elasticsearch</span><span class="hljs-selector-pseudo">:2.4.6</span></code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/2501393-10a4fccad9fac142.png" srcset="/img/loading.gif" alt="img"></p><h1 id="3、查看镜像"><a href="#3、查看镜像" class="headerlink" title="3、查看镜像"></a>3、查看镜像</h1><pre><code class="hljs undefined">docker images</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/2501393-13d29ed982818185.webp" srcset="/img/loading.gif" alt=""></p><h1 id="4、通过镜像，启动一个容器，并将9200和9300端口映射到本机"><a href="#4、通过镜像，启动一个容器，并将9200和9300端口映射到本机" class="headerlink" title="4、通过镜像，启动一个容器，并将9200和9300端口映射到本机"></a>4、通过镜像，启动一个容器，并将9200和9300端口映射到本机</h1><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">run</span> <span class="hljs-selector-tag">-d</span> <span class="hljs-selector-tag">-p</span> 9200<span class="hljs-selector-pseudo">:9200</span> <span class="hljs-selector-tag">-p</span> 9300<span class="hljs-selector-pseudo">:9300</span> <span class="hljs-selector-tag">--name</span> <span class="hljs-selector-tag">elasticsearch</span> <span class="hljs-selector-tag">elasticsearch</span><span class="hljs-selector-pseudo">:2.4.6</span></code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/2501393-55083cbe6ac8abc9.webp" srcset="/img/loading.gif" alt="img"></p><h1 id="5、查看已启动容器"><a href="#5、查看已启动容器" class="headerlink" title="5、查看已启动容器"></a>5、查看已启动容器</h1><pre><code class="hljs undefined">docker ps</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/2501393-611a5809e4c3125d.webp" srcset="/img/loading.gif" alt="img"><br>验证是否安装成功？访问：(本机ip地址:9200)<br><a href="http://192.168.43.107:9200" target="_blank" rel="noopener">http://192.168.43.107:9200</a></p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/image-20200607170052643.png" srcset="/img/loading.gif" alt="image-20200607170052643"></p><h1 id="6、安装插件，先进入容器："><a href="#6、安装插件，先进入容器：" class="headerlink" title="6、安装插件，先进入容器："></a>6、安装插件，先进入容器：</h1><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it elasticsearch /bin/bash</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/2501393-726d9ce61c0bb9f6.webp" srcset="/img/loading.gif" alt="img"></p><h1 id="7、进入容器bin目录，并执行安装插件命令："><a href="#7、进入容器bin目录，并执行安装插件命令：" class="headerlink" title="7、进入容器bin目录，并执行安装插件命令："></a>7、进入容器bin目录，并执行安装插件命令：</h1><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> binls plugin install mobz/elasticsearch-head</code></pre><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/2501393-e1e4183306bbe066.webp" srcset="/img/loading.gif" alt="img"></p><p>访问：<br><a href="http://192.168.43.107:9200/_plugin/head/" target="_blank" rel="noopener">http://192.168.43.107:9200/_plugin/head/</a></p><p><img src="https://lxgj.oss-cn-beijing.aliyuncs.com/2501393-14966cb3a67f4bd4.webp" srcset="/img/loading.gif" alt="img"><br>插件安装成功</p>]]></content>
    
    
    <categories>
      
      <category>centos</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rails 部署</title>
    <link href="/posts/d773cc73.html"/>
    <url>/posts/d773cc73.html</url>
    
    <content type="html"><![CDATA[<h3 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h3><blockquote><p>在服务器添加一个新的用户，用户名为deploy<a href="">教程</a></p></blockquote><ul><li><p>执行命令<code>adduser</code></p></li><li><p>按提示输入密码</p></li><li><p>设置一些个人信息，可以直接按enter键，设为空</p></li><li><p>添加权限</p><a id="more"></a><p>在root用户下，打开<code>/etc/sudoers</code>文件</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> This file MUST be edited with the <span class="hljs-string">'visudo'</span> <span class="hljs-built_in">command</span> as root.</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> Please consider adding <span class="hljs-built_in">local</span> content <span class="hljs-keyword">in</span> /etc/sudoers.d/ instead of</span><span class="hljs-meta">#</span><span class="bash"> directly modifying this file.</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> See the man page <span class="hljs-keyword">for</span> details on how to write a sudoers file.</span><span class="hljs-meta">#</span>Defaults        env_resetDefaults        mail_badpassDefaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"<span class="hljs-meta">#</span><span class="bash"> Host <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> User <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> Cmnd <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> User privilege specification</span>root    ALL=(ALL:ALL) ALLdeploy  ALL=(ALL:ALL) ALL # 添加这一行，使deploy具有使用sudo的权限<span class="hljs-meta">#</span><span class="bash"> Members of the admin group may gain root privileges</span><span class="hljs-meta">%</span><span class="bash">admin ALL=(ALL) ALL</span><span class="hljs-meta">#</span><span class="bash"> Allow members of group sudo to execute any <span class="hljs-built_in">command</span></span><span class="hljs-meta">%</span><span class="bash">sudo   ALL=(ALL:ALL) ALL</span><span class="hljs-meta">#</span><span class="bash"> See sudoers(5) <span class="hljs-keyword">for</span> more information on <span class="hljs-string">"#include"</span> directives:</span><span class="hljs-meta">#</span><span class="bash">includedir /etc/sudoers.d</span></code></pre></li></ul><h3 id="ruby安装"><a href="#ruby安装" class="headerlink" title="ruby安装"></a>ruby安装</h3><ul><li><p>安装<code>rbenv</code> <a href="https://ruby-china.org/wiki/rbenv-guide" target="_blank" rel="noopener">教程来源</a><br><code>sudo deploy</code>回到deploy下</p><pre><code class="hljs shell">git clone https://github.com/rbenv/rbenv.git ~/.rbenv<span class="hljs-meta">#</span><span class="bash"> 用来编译安装 ruby</span>git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build<span class="hljs-meta">#</span><span class="bash"> 用来管理 gemset, 可选, 因为有 bundler 也没什么必要</span>git clone git://github.com/jamis/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset<span class="hljs-meta">#</span><span class="bash"> 通过 rbenv update 命令来更新 rbenv 以及所有插件, 推荐</span>git clone git://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update<span class="hljs-meta">#</span><span class="bash"> 使用 Ruby China 的镜像安装 Ruby, 国内用户推荐</span>git clone git://github.com/AndorChen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror</code></pre><p>然后把下面的代码放到 <code>~/.bashrc</code> 里</p><pre><code class="hljs shell">export PATH="$HOME/.rbenv/bin:$PATH"eval "$(rbenv init -)"</code></pre><p>然后重开一个终端就可以执行 rbenv 了.</p></li><li><p>安装ruby</p><pre><code class="hljs shell">rbenv install --list  # 列出所有 ruby 版本rbenv install 2.5.0     # 安装 2.5.0</code></pre><p>安转过程可能出现缺少依赖的错误，可参考<a href="https://gist.github.com/sandyxu/8aceec7e436a6ab9621f" target="_blank" rel="noopener">这篇文章解决</a><br>一般解决办法:</p><pre><code class="hljs shell">sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline6 libreadline6-dev zlib1g zlib1g-dev</code></pre></li><li><p>验证安装是否成功</p><pre><code class="hljs shell">rbenv versions               # 列出安装的版本rbenv version                # 列出正在使用的版本</code></pre></li><li><p>设置版本</p><pre><code class="hljs shell">rbenv global 2.5.0      # 默认使用 2.5.0rbenv shell 2.5.0       # 当前的 shell 使用 2.5.0, 会设置一个 `RBENV_VERSION` 环境变量rbenv local jruby-1.7.3      # 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件</code></pre></li><li><p>last</p><pre><code class="hljs shell">rbenv rehash                 # 每当切换 ruby 版本和执行 bundle install 之后必须执行这个命令rbenv which irb              # 列出 irb 这个命令的完整路径rbenv whence irb             # 列出包含 irb 这个命令的版本</code></pre></li><li><p>安装<code>bundle</code></p><pre><code class="hljs shell">gem install bundle</code></pre></li><li><p>安装<code>rails</code></p><pre><code class="hljs shell">gem install rails</code></pre></li><li><p>安装nodejs</p><pre><code class="hljs shell">sudo apt install nodejs</code></pre></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>使用postgresql数据库<a href="https://www.postgresql.org/download/linux/ubuntu/" target="_blank" rel="noopener">教程来源</a></p><pre><code class="hljs shell">sudo apt-get install postgresql</code></pre><ul><li><p>新建数据库用户</p><pre><code class="hljs shell">sudo -i -u postgres  //切换到数据库的超级管理员psql                 //进入数据库控制台create user deploy with password 'xxxx'; //新建一个deploy用户，密码是xxxalter role deploy with createdb; //使deploy用户具有创建数据库的权限alter role deploy with login；//使deploy用户具有登录数据库的权限</code></pre></li><li><p>注意：</p><p>在后面安装pg gem时，可能会出现<code>You need to install postgresql-server-dev-X.Y for building a server-side extension or libpq-dev for building a client-side applic ation</code>错误,依次执行：</p><pre><code class="hljs shell">sudo apt-get install python-psycopg2sudo apt-get install libpq-dev</code></pre></li></ul><h3 id="nginx-passenger-安装"><a href="#nginx-passenger-安装" class="headerlink" title="nginx passenger 安装"></a>nginx passenger 安装</h3><p><a href="https://www.phusionpassenger.com/library/install/nginx/install/oss/xenial/" target="_blank" rel="noopener">这里很详细了</a></p><pre><code class="hljs shell">sudo apt-get install -y dirmngr gnupgsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7sudo apt-get install -y apt-transport-https ca-certificatessudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main &gt; /etc/apt/sources.list.d/passenger.list'sudo apt-get updatesudo apt-get install -y nginx-extras passenger</code></pre><ul><li><p>passenger的配置</p><p>nginx安装以后，打开<code>/etc/nginx/passenger.conf</code>会看到</p><pre><code class="hljs conf">passenger_root &#x2F;usr&#x2F;lib&#x2F;ruby&#x2F;vendor_ruby&#x2F;phusion_passenger&#x2F;locations.ini;passenger_ruby &#x2F;home&#x2F;deploy&#x2F;.rbenv&#x2F;shims&#x2F;ruby; &#x2F;&#x2F;这里需要修改ruby的安装路径</code></pre><p><code>which ruby</code> 可以查看ruby的路径</p></li></ul><h3 id="Capistrano配置原文教程"><a href="#Capistrano配置原文教程" class="headerlink" title="Capistrano配置原文教程"></a>Capistrano配置<a href="https://ruby-china.org/topics/18616" target="_blank" rel="noopener">原文教程</a></h3><ul><li><p>安装必要的包</p><pre><code class="hljs ruby">group <span class="hljs-symbol">:development</span> <span class="hljs-keyword">do</span>gem <span class="hljs-string">'capistrano'</span>gem <span class="hljs-string">'capistrano-bundler'</span>gem <span class="hljs-string">'capistrano-rails'</span>gem <span class="hljs-string">'capistrano-rbenv'</span><span class="hljs-comment"># Add this if you're using rvm</span><span class="hljs-comment"># gem 'capistrano-rvm'</span><span class="hljs-keyword">end</span></code></pre></li><li><p><code>cap install</code></p></li><li><p>我的capfile文件</p><pre><code class="hljs ruby"><span class="hljs-comment"># Load DSL and set up stages</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/setup"</span><span class="hljs-comment"># Include default deployment tasks</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/deploy"</span><span class="hljs-comment"># Load the SCM plugin appropriate to your project:</span><span class="hljs-comment">#</span><span class="hljs-comment"># require "capistrano/scm/hg"</span><span class="hljs-comment"># install_plugin Capistrano::SCM::Hg</span><span class="hljs-comment"># or</span><span class="hljs-comment"># require "capistrano/scm/svn"</span><span class="hljs-comment"># install_plugin Capistrano::SCM::Svn</span><span class="hljs-comment"># or</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/scm/git"</span>install_plugin Capistrano::SCM::Git<span class="hljs-comment"># Include tasks from other gems included in your Gemfile</span><span class="hljs-comment">#</span><span class="hljs-comment"># For documentation on these, see for example:</span><span class="hljs-comment">#</span><span class="hljs-comment">#   https://github.com/capistrano/rvm</span><span class="hljs-comment">#   https://github.com/capistrano/rbenv</span><span class="hljs-comment">#   https://github.com/capistrano/chruby</span><span class="hljs-comment">#   https://github.com/capistrano/bundler</span><span class="hljs-comment">#   https://github.com/capistrano/rails</span><span class="hljs-comment">#   https://github.com/capistrano/passenger</span><span class="hljs-comment">#</span><span class="hljs-comment"># require "capistrano/rvm"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rbenv"</span><span class="hljs-comment"># require "capistrano/chruby"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/bundler"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rails/assets"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rails/migrations"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/passenger"</span>set <span class="hljs-symbol">:rbenv_type</span>, <span class="hljs-symbol">:user</span>set <span class="hljs-symbol">:rbenv_ruby</span>, <span class="hljs-string">'2.5.0'</span><span class="hljs-comment"># Load custom tasks from `lib/capistrano/tasks` if you have any defined</span>Dir.glob(<span class="hljs-string">"lib/capistrano/tasks/*.rake"</span>).each &#123; <span class="hljs-params">|r|</span> import r &#125;</code></pre><p>我的deploy.rb文件</p><pre><code class="hljs ruby"><span class="hljs-comment"># config valid for current version and patch releases of Capistrano</span>lock <span class="hljs-string">"~&gt; 3.10.2"</span>set <span class="hljs-symbol">:application</span>, <span class="hljs-string">"script_blog"</span>set <span class="hljs-symbol">:repo_url</span>, <span class="hljs-string">"https://github.com/dccmmtop/script_blog.git"</span><span class="hljs-comment"># Default branch is :master</span><span class="hljs-comment"># ask :branch, `git rev-parse --abbrev-ref HEAD`.chomp</span><span class="hljs-comment"># Default deploy_to directory is /var/www/my_app_name</span>set <span class="hljs-symbol">:deploy_to</span>, <span class="hljs-string">"/home/deploy/scrit_blog"</span><span class="hljs-comment"># Default value for :format is :airbrussh.</span><span class="hljs-comment"># set :format, :airbrussh</span><span class="hljs-comment"># You can configure the Airbrussh format using :format_options.</span><span class="hljs-comment"># These are the defaults.</span><span class="hljs-comment"># set :format_options, command_output: true, log_file: "log/capistrano.log", color: :auto, truncate: :auto</span><span class="hljs-comment"># Default value for :pty is false</span><span class="hljs-comment"># set :pty, true</span><span class="hljs-comment"># Default value for :linked_files is []</span><span class="hljs-comment"># 在服务器&lt;project-name&gt;/share/config/ 下，要手动新建这两个文件，</span>append <span class="hljs-symbol">:linked_files</span>, <span class="hljs-string">"config/database.yml"</span>,<span class="hljs-string">"config/secrets.yml"</span> <span class="hljs-comment"># Default value for linked_dirs is []</span>append <span class="hljs-symbol">:linked_dirs</span>, <span class="hljs-string">"log"</span>, <span class="hljs-string">"tmp/pids"</span>, <span class="hljs-string">"tmp/cache"</span>, <span class="hljs-string">"tmp/sockets"</span>, <span class="hljs-string">"public/system"</span><span class="hljs-comment"># Default value for default_env is &#123;&#125;</span><span class="hljs-comment"># set :default_env, &#123; path: "/opt/ruby/bin:$PATH" &#125;</span><span class="hljs-comment"># Default value for local_user is ENV['USER']</span><span class="hljs-comment"># set :local_user, -&gt; &#123; `git config user.name`.chomp &#125;</span><span class="hljs-comment"># Default value for keep_releases is 5</span><span class="hljs-comment"># set :keep_releases, 5</span><span class="hljs-comment"># Uncomment the following to require manually verifying the host key before first deploy.</span><span class="hljs-comment"># set :ssh_options, verify_host_key: :secure</span></code></pre><p>注意<code>append :linked_files, &quot;config/database.yml&quot;,&quot;config/secrets.yml&quot;</code></p><p><code>database.yml</code>和<code>secrets.yml</code>是手动在,<code>share/config/</code>目录下新建的，一个是连接数据库的相关信息，一个是安全验证相关信息。我的部署目录是<code>scriot_blog/</code> 就新建 <code>script_blog/share/config/</code> 目录</p><p>同时新建以上两个文件。</p><p>database.yml</p><pre><code class="hljs yml"><span class="hljs-attr">production:</span><span class="hljs-attr">adapter:</span> <span class="hljs-string">postgresql</span><span class="hljs-attr">pool:</span> &lt;%=<span class="ruby"> ENV.fetch(<span class="hljs-string">"RAILS_MAX_THREADS"</span>) &#123; <span class="hljs-number">5</span> &#125; </span>%&gt;<span class="hljs-attr">timeout:</span> <span class="hljs-number">5000</span><span class="hljs-attr">database:</span> <span class="hljs-string">production_blog</span><span class="hljs-attr">username:</span> <span class="hljs-string">'xxx'</span><span class="hljs-attr">password:</span> <span class="hljs-string">'xxx'</span></code></pre><p>secrets.yml</p><pre><code class="hljs yml"><span class="hljs-attr">production:</span><span class="hljs-attr">secret_key_base:</span> <span class="hljs-string">xxxxxx</span></code></pre><p>其中<code>secret_key_base</code>的值是在本地项目下 执行<code>rake secret</code> 命令生成的。</p></li><li><p>deploy/production.rb</p><pre><code class="hljs ruby"><span class="hljs-comment"># server-based syntax</span><span class="hljs-comment"># ======================</span><span class="hljs-comment"># Defines a single server with a list of roles and multiple properties.</span><span class="hljs-comment"># You can define all roles on a single server, or split them:</span><span class="hljs-comment"># server "39.108.138.149", user: "root", roles: %w&#123;app db web&#125;, my_property: :my_value</span>server <span class="hljs-string">"xxxx服务器的ip"</span>, <span class="hljs-symbol">user:</span> <span class="hljs-string">"deploy"</span>, <span class="hljs-symbol">roles:</span> <span class="hljs-string">%w&#123;app db web&#125;</span><span class="hljs-comment"># server "example.com", user: "deploy", roles: %w&#123;app web&#125;, other_property: :other_value</span><span class="hljs-comment"># server "db.example.com", user: "deploy", roles: %w&#123;db&#125;</span><span class="hljs-comment"># role-based syntax</span><span class="hljs-comment"># ==================</span><span class="hljs-comment"># Defines a role with one or multiple servers. The primary server in each</span><span class="hljs-comment"># group is considered to be the first unless any hosts have the primary</span><span class="hljs-comment"># property set. Specify the username and a domain or IP for the server.</span><span class="hljs-comment"># Don't use `:all`, it's a meta role.</span><span class="hljs-comment"># role :app, %w&#123;deploy<span class="hljs-doctag">@example</span>.com&#125;, my_property: :my_value</span><span class="hljs-comment"># role :web, %w&#123;user1<span class="hljs-doctag">@primary</span>.com user2<span class="hljs-doctag">@additional</span>.com&#125;, other_property: :other_value</span><span class="hljs-comment"># role :db,  %w&#123;deploy<span class="hljs-doctag">@example</span>.com&#125;</span><span class="hljs-comment"># Configuration</span><span class="hljs-comment"># =============</span><span class="hljs-comment"># You can set any configuration variable like in config/deploy.rb</span><span class="hljs-comment"># These variables are then only loaded and set in this stage.</span><span class="hljs-comment"># For available Capistrano configuration variables see the documentation page.</span><span class="hljs-comment"># http://capistranorb.com/documentation/getting-started/configuration/</span><span class="hljs-comment"># Feel free to add new variables to customise your setup.</span><span class="hljs-comment"># Custom SSH Options</span><span class="hljs-comment"># ==================</span><span class="hljs-comment"># You may pass any option but keep in mind that net/ssh understands a</span><span class="hljs-comment"># limited set of options, consult the Net::SSH documentation.</span><span class="hljs-comment"># http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start</span><span class="hljs-comment">#</span><span class="hljs-comment"># Global options</span><span class="hljs-comment"># --------------</span>set <span class="hljs-symbol">:ssh_options</span>, &#123;<span class="hljs-symbol">keys:</span> <span class="hljs-string">%w(/home/deploy/.ssh/id_rsa)</span>,<span class="hljs-symbol">port:</span> xxx<span class="hljs-comment"># forward_agent: false,</span><span class="hljs-comment"># auth_methods: %w(password)</span>&#125;<span class="hljs-comment">#</span><span class="hljs-comment"># The server-based syntax can be used to override options:</span><span class="hljs-comment"># ------------------------------------</span><span class="hljs-comment"># server "example.com",</span><span class="hljs-comment">#   user: "user_name",</span><span class="hljs-comment">#     keys: %w(/home/user_name/.ssh/id_rsa),</span><span class="hljs-comment">#     forward_agent: false,</span><span class="hljs-comment">#     auth_methods: %w(publickey password)</span><span class="hljs-comment">#     # password: "please use keys"</span><span class="hljs-comment">#   &#125;</span></code></pre></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本地执行<code>cap production deploy</code></p>]]></content>
    
    
    <categories>
      
      <category>ruby</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rails</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/4a17b156.html"/>
    <url>/posts/4a17b156.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
