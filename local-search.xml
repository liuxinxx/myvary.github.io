<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker安装kafka</title>
    <link href="/2020/06/06/docker%E5%AE%89%E8%A3%85kafka/"/>
    <url>/2020/06/06/docker%E5%AE%89%E8%A3%85kafka/</url>
    
    <content type="html"><![CDATA[<h1 id="docker安装kafka1-kafka需要zookeeper管理，所以需要先安装zookeeper。-下载docker-pull-wurstmeister-zookeeper-latest版本"><a href="#docker安装kafka1-kafka需要zookeeper管理，所以需要先安装zookeeper。-下载docker-pull-wurstmeister-zookeeper-latest版本" class="headerlink" title="docker安装kafka1:kafka需要zookeeper管理，所以需要先安装zookeeper。 下载docker pull wurstmeister/zookeeper:latest版本"></a>docker安装kafka1:kafka需要zookeeper管理，所以需要先安装zookeeper。 下载docker pull wurstmeister/zookeeper:latest版本</h1><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull wurstmeister/zookeeper</code></pre><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-307d1c0c1efd1229.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/647/format/webp" srcset="/img/loading.gif" alt="img"></p><p>2：启动镜像生成容器</p><pre><code class="hljs groovy">docker run -d --name zookeeper -p <span class="hljs-number">2181</span>:<span class="hljs-number">2181</span> -v <span class="hljs-regexp">/etc/</span><span class="hljs-string">localtime:</span><span class="hljs-regexp">/etc/</span>localtime wurstmeister/zookeeper</code></pre><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-c4eb11a2b8f2f4e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1186/format/webp" srcset="/img/loading.gif" alt="img"></p><p>3：下载kafka镜像</p><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull wurstmeister/kafka</code></pre><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-f1dc71635b24d8eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" srcset="/img/loading.gif" alt="img"></p><p>4：启动kafka镜像生成容器</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d --name kafka -p 9092:9092 -e <span class="hljs-attribute">KAFKA_BROKER_ID</span>=0 -e <span class="hljs-attribute">KAFKA_ZOOKEEPER_CONNECT</span>=192.168.155.56:2181/kafka -e <span class="hljs-attribute">KAFKA_ADVERTISED_LISTENERS</span>=PLAINTEXT://192.168.155.56:9092 -e <span class="hljs-attribute">KAFKA_LISTENERS</span>=PLAINTEXT://0.0.0.0:9092 -v /etc/localtime:/etc/localtime wurstmeister/kafka</code></pre><p>*<em>-e KAFKA_BROKER_ID=0 在kafka集群中，每个kafka都有一个BROKER_ID来区分自己<br>*</em></p><p>*<em>-e KAFKA_ZOOKEEPER_CONNECT=192.168.155.56:2181/kafka 配置zookeeper管理kafka的路径192.168.155.56:2181/kafka<br>*</em></p><p>*<em>-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.155.56:9092 把kafka的地址端口注册给zookeeper<br>*</em></p><p>*<em>-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 配置kafka的监听端口<br>*</em></p><p><strong>-v /etc/localtime:/etc/localtime 容器时间同步虚拟机的时间</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-4565050db8e8115f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" srcset="/img/loading.gif" alt="img"></p><p>5：验证kafka是否可以使用</p><p>进入容器</p><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> kafka /bin/sh</code></pre><p>进入路径：<code>/opt/kafka_2.11-2.0.0/bin</code>下</p><p>运行kafka生产者发送消息</p><pre><code class="hljs vim">./kafka-console-producer.<span class="hljs-keyword">sh</span> --broker-<span class="hljs-keyword">list</span> localhos<span class="hljs-variable">t:9092</span> --topic <span class="hljs-keyword">sun</span></code></pre><p>发送消息</p><pre><code class="hljs json">&#123;<span class="hljs-attr">"datas"</span>:[&#123;<span class="hljs-attr">"channel"</span>:<span class="hljs-string">""</span>,<span class="hljs-attr">"metric"</span>:<span class="hljs-string">"temperature"</span>,<span class="hljs-attr">"producer"</span>:<span class="hljs-string">"ijinus"</span>,<span class="hljs-attr">"sn"</span>:<span class="hljs-string">"IJA0101-00002245"</span>,<span class="hljs-attr">"time"</span>:<span class="hljs-string">"1543207156000"</span>,<span class="hljs-attr">"value"</span>:<span class="hljs-string">"80"</span>&#125;],<span class="hljs-attr">"ver"</span>:<span class="hljs-string">"1.0"</span>&#125;</code></pre><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-43aa4c10f76894be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1138/format/webp" srcset="/img/loading.gif" alt="img"></p><p>‘</p><p>运行kafka消费者接收消息</p><pre><code class="hljs brainfuck"><span class="hljs-comment">kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">console</span><span class="hljs-literal">-</span><span class="hljs-comment">consumer</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> --<span class="hljs-comment">bootstrap</span><span class="hljs-literal">-</span><span class="hljs-comment">server</span> <span class="hljs-comment">localhost:9092</span> --<span class="hljs-comment">topic</span> <span class="hljs-comment">sun</span> --<span class="hljs-comment">from</span><span class="hljs-literal">-</span><span class="hljs-comment">beginning</span></code></pre><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-83a67ecf3b2f4c61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1135/format/webp" srcset="/img/loading.gif" alt="img"></p><p><strong>——————————————————————-关键总结————————————————————————</strong></p><p><strong>1：进入zookeeper容器内，可以看到kafka注册信息</strong></p><p><strong>docker exec -it zookeeper /bin/sh</strong></p><p><strong>进入bin目录</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-d83a20041541403a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/651/format/webp" srcset="/img/loading.gif" alt="img"></p><p><strong>运行zkCli.sh进入zookeeper客户端</strong></p><p><strong>./zkCli.sh</strong></p><p>**<br>**</p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-892a97de85e8ff28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" srcset="/img/loading.gif" alt="img"></p><p><strong>ls / 可以查看zookeeper根节点下都挂了那些目录</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-c18fd13b09cf3921.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/257/format/webp" srcset="/img/loading.gif" alt="img"></p><p><strong>可以看到我注册的kafka目录，运行</strong></p><p>*<em>ls /kafka/brokers/topics/sun/partitions<br>*</em></p><p><strong>可以看到我建立的topic叫sun主题的partitions信息</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-caf9829a34569b6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/591/format/webp" srcset="/img/loading.gif" alt="img"></p><p><strong>get命令会显示该节点的节点数据内容和属性信息</strong><br><strong>get /kafka/brokers/topics/sun</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-34064db5ad1e14da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/519/format/webp" srcset="/img/loading.gif" alt="img"></p><p>*<em>ls2命令会显示该节点的子节点信息和属性信息<br>*</em></p><p><strong>ls2 /kafka/brokers/topics/sun</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-630a5d53bcacc228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/510/format/webp" srcset="/img/loading.gif" alt="img"></p><p><strong>通过命令行创建topic和partitions</strong></p><p><strong>kafka-topics.sh –create –zookeeper 192.168.155.56:2181/kafka –topic topic-test1 –replication-factor 1 –partitions 2</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-94e14e20955def09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" srcset="/img/loading.gif" alt="img"></p><p><strong>当创建的replication-factor=2时，因为zookeeper的zoo.cfg配置文件中tickTime=2000会报链接超时，把这个值调大一些，重启zookeeper，再创建topic正常。</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-b77ca5319b1c783b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1173/format/webp" srcset="/img/loading.gif" alt="img"></p><h4 id="删除topic-使用命令："><a href="#删除topic-使用命令：" class="headerlink" title="删除topic 使用命令："></a><strong>删除topic 使用命令：</strong></h4><p>若 delete.topic.enable=true </p><p>直接彻底删除该 Topic。</p><p>若 delete.topic.enable=false</p><p>如果当前 Topic 没有使用过即没有传输过信息：可以彻底删除。</p><p>如果当前 Topic 有使用过即有过传输过信息：并没有真正删除 Topic 只是把这个 Topic 标记为删除(marked for deletion)，重启 Kafka Server 后删除。</p><p>我的kafka版本是最新的，在service.config文件中是找不到delete.topic.enable=true，系统默认是true.</p><p>进入kafka容器，cd opt/kafka/bin</p><p>kafka-topics.sh –delete –zookeeper 192.168.155.56:2181/kafka –topic sun</p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-09656f3074e52240.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/646/format/webp" srcset="/img/loading.gif" alt="img"></p><p>命令可以删除容器中的topic数据，还有zookeeper中的topic目录。</p><p>可以在zookeeper中查看目录是否已经删除掉了</p><p>进入zookeeper容器，在bin下运行./zkCli.sh</p><p>ls /kafka/brokers/topics</p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-f8bd882c138b2533.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/582/format/webp" srcset="/img/loading.gif" alt="img"></p><p>还有一种暴力删除方法，因为我启动kafka容器的时候，没有外挂topic路径。所以我直接把容器删除掉，再重新启动一个新的容器也能实现topic的删除。（这种方式不推荐用）</p><h4 id="docker-kafka-数据文件保存的路径："><a href="#docker-kafka-数据文件保存的路径：" class="headerlink" title="docker kafka 数据文件保存的路径："></a><strong>docker kafka 数据文件保存的路径：</strong></h4><p>在配置文件service.config中配置的，log.dirs配置保存路径。</p><p>进入kafka容器,找到配置文件路径/opt/kafka_2.11-2.0.0/config</p><p>vi service.config </p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-37cb85979bd42d80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/577/format/webp" srcset="/img/loading.gif" alt="img"></p><p>默认配置在/kafka/kafka-logs-4eaa3ff7f59d下</p><p><img src="https:////upload-images.jianshu.io/upload_images/14796116-70ee5558650d606c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/539/format/webp" srcset="/img/loading.gif" alt="img"></p><p>作者：szgl_lucifer<br>链接：<a href="https://www.jianshu.com/p/e8c29cba9fae" target="_blank" rel="noopener">https://www.jianshu.com/p/e8c29cba9fae</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2020/06/05/test/"/>
    <url>/2020/06/05/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rails 部署</title>
    <link href="/2020/06/05/Rails%20%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/06/05/Rails%20%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h3><blockquote><p>在服务器添加一个新的用户，用户名为deploy<a href="">教程</a></p></blockquote><ul><li><p>执行命令<code>adduser</code> </p></li><li><p>按提示输入密码</p></li><li><p>设置一些个人信息，可以直接按enter键，设为空</p></li><li><p>添加权限</p><a id="more"></a><p>在root用户下，打开<code>/etc/sudoers</code>文件</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> This file MUST be edited with the <span class="hljs-string">'visudo'</span> <span class="hljs-built_in">command</span> as root.</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> Please consider adding <span class="hljs-built_in">local</span> content <span class="hljs-keyword">in</span> /etc/sudoers.d/ instead of</span><span class="hljs-meta">#</span><span class="bash"> directly modifying this file.</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash"> See the man page <span class="hljs-keyword">for</span> details on how to write a sudoers file.</span><span class="hljs-meta">#</span>Defaults        env_resetDefaults        mail_badpassDefaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"<span class="hljs-meta">#</span><span class="bash"> Host <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> User <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> Cmnd <span class="hljs-built_in">alias</span> specification</span><span class="hljs-meta">#</span><span class="bash"> User privilege specification</span>root    ALL=(ALL:ALL) ALLdeploy  ALL=(ALL:ALL) ALL # 添加这一行，使deploy具有使用sudo的权限<span class="hljs-meta">#</span><span class="bash"> Members of the admin group may gain root privileges</span><span class="hljs-meta">%</span><span class="bash">admin ALL=(ALL) ALL</span><span class="hljs-meta">#</span><span class="bash"> Allow members of group sudo to execute any <span class="hljs-built_in">command</span></span><span class="hljs-meta">%</span><span class="bash">sudo   ALL=(ALL:ALL) ALL</span><span class="hljs-meta">#</span><span class="bash"> See sudoers(5) <span class="hljs-keyword">for</span> more information on <span class="hljs-string">"#include"</span> directives:</span><span class="hljs-meta">#</span><span class="bash">includedir /etc/sudoers.d</span></code></pre></li></ul><h3 id="ruby安装"><a href="#ruby安装" class="headerlink" title="ruby安装"></a>ruby安装</h3><ul><li><p>安装<code>rbenv</code>  <a href="https://ruby-china.org/wiki/rbenv-guide" target="_blank" rel="noopener">教程来源</a><br><code>sudo deploy</code>回到deploy下</p><pre><code class="hljs shell">git clone https://github.com/rbenv/rbenv.git ~/.rbenv<span class="hljs-meta">#</span><span class="bash"> 用来编译安装 ruby</span>git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build<span class="hljs-meta">#</span><span class="bash"> 用来管理 gemset, 可选, 因为有 bundler 也没什么必要</span>git clone git://github.com/jamis/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset<span class="hljs-meta">#</span><span class="bash"> 通过 rbenv update 命令来更新 rbenv 以及所有插件, 推荐</span>git clone git://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update<span class="hljs-meta">#</span><span class="bash"> 使用 Ruby China 的镜像安装 Ruby, 国内用户推荐</span>git clone git://github.com/AndorChen/rbenv-china-mirror.git ~/.rbenv/plugins/rbenv-china-mirror</code></pre><p>然后把下面的代码放到 <code>~/.bashrc</code> 里</p><pre><code class="hljs shell">export PATH="$HOME/.rbenv/bin:$PATH"eval "$(rbenv init -)"</code></pre><p>然后重开一个终端就可以执行 rbenv 了.</p></li><li><p>安装ruby</p><pre><code class="hljs shell">rbenv install --list  # 列出所有 ruby 版本rbenv install 2.5.0     # 安装 2.5.0</code></pre><p>安转过程可能出现缺少依赖的错误，可参考<a href="https://gist.github.com/sandyxu/8aceec7e436a6ab9621f" target="_blank" rel="noopener">这篇文章解决</a><br>一般解决办法:</p><pre><code class="hljs shell">sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline6 libreadline6-dev zlib1g zlib1g-dev</code></pre></li><li><p>验证安装是否成功</p><pre><code class="hljs shell">rbenv versions               # 列出安装的版本rbenv version                # 列出正在使用的版本</code></pre></li><li><p>设置版本</p><pre><code class="hljs shell">rbenv global 2.5.0      # 默认使用 2.5.0rbenv shell 2.5.0       # 当前的 shell 使用 2.5.0, 会设置一个 `RBENV_VERSION` 环境变量rbenv local jruby-1.7.3      # 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件</code></pre></li><li><p>last</p><pre><code class="hljs shell">rbenv rehash                 # 每当切换 ruby 版本和执行 bundle install 之后必须执行这个命令rbenv which irb              # 列出 irb 这个命令的完整路径rbenv whence irb             # 列出包含 irb 这个命令的版本</code></pre></li><li><p>安装<code>bundle</code></p><pre><code class="hljs shell">gem install bundle</code></pre></li><li><p>安装<code>rails</code></p><pre><code class="hljs shell">gem install rails</code></pre></li><li><p>安装nodejs</p><pre><code class="hljs shell">sudo apt install nodejs</code></pre></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>  使用postgresql数据库<a href="https://www.postgresql.org/download/linux/ubuntu/" target="_blank" rel="noopener">教程来源</a></p><pre><code class="hljs shell">sudo apt-get install postgresql</code></pre><ul><li><p>新建数据库用户</p><pre><code class="hljs shell">sudo -i -u postgres  //切换到数据库的超级管理员psql                 //进入数据库控制台create user deploy with password 'xxxx'; //新建一个deploy用户，密码是xxxalter role deploy with createdb; //使deploy用户具有创建数据库的权限alter role deploy with login；//使deploy用户具有登录数据库的权限</code></pre></li><li><p>注意：</p><p>在后面安装pg gem时，可能会出现<code>You need to install postgresql-server-dev-X.Y for building a server-side extension or libpq-dev for building a client-side application</code>错误,依次执行：</p><pre><code class="hljs shell">sudo apt-get install python-psycopg2sudo apt-get install libpq-dev</code></pre></li></ul><h3 id="nginx-passenger-安装"><a href="#nginx-passenger-安装" class="headerlink" title="nginx passenger 安装"></a>nginx passenger 安装</h3><p>  <a href="https://www.phusionpassenger.com/library/install/nginx/install/oss/xenial/" target="_blank" rel="noopener">这里很详细了</a></p><pre><code class="hljs shell">sudo apt-get install -y dirmngr gnupgsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7sudo apt-get install -y apt-transport-https ca-certificatessudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main &gt; /etc/apt/sources.list.d/passenger.list'sudo apt-get updatesudo apt-get install -y nginx-extras passenger</code></pre><ul><li><p>passenger的配置</p><p>nginx安装以后，打开<code>/etc/nginx/passenger.conf</code>会看到</p><pre><code class="hljs conf">passenger_root &#x2F;usr&#x2F;lib&#x2F;ruby&#x2F;vendor_ruby&#x2F;phusion_passenger&#x2F;locations.ini;passenger_ruby &#x2F;home&#x2F;deploy&#x2F;.rbenv&#x2F;shims&#x2F;ruby; &#x2F;&#x2F;这里需要修改ruby的安装路径</code></pre><p><code>which ruby</code> 可以查看ruby的路径</p></li></ul><h3 id="Capistrano配置原文教程"><a href="#Capistrano配置原文教程" class="headerlink" title="Capistrano配置原文教程"></a>Capistrano配置<a href="https://ruby-china.org/topics/18616" target="_blank" rel="noopener">原文教程</a></h3><ul><li><p>安装必要的包</p><pre><code class="hljs ruby">group <span class="hljs-symbol">:development</span> <span class="hljs-keyword">do</span>gem <span class="hljs-string">'capistrano'</span>gem <span class="hljs-string">'capistrano-bundler'</span>gem <span class="hljs-string">'capistrano-rails'</span>gem <span class="hljs-string">'capistrano-rbenv'</span><span class="hljs-comment"># Add this if you're using rvm</span><span class="hljs-comment"># gem 'capistrano-rvm'</span><span class="hljs-keyword">end</span></code></pre></li><li><p><code>cap install</code></p></li><li><p>我的capfile文件</p><pre><code class="hljs ruby"><span class="hljs-comment"># Load DSL and set up stages</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/setup"</span><span class="hljs-comment"># Include default deployment tasks</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/deploy"</span><span class="hljs-comment"># Load the SCM plugin appropriate to your project:</span><span class="hljs-comment">#</span><span class="hljs-comment"># require "capistrano/scm/hg"</span><span class="hljs-comment"># install_plugin Capistrano::SCM::Hg</span><span class="hljs-comment"># or</span><span class="hljs-comment"># require "capistrano/scm/svn"</span><span class="hljs-comment"># install_plugin Capistrano::SCM::Svn</span><span class="hljs-comment"># or</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/scm/git"</span>install_plugin Capistrano::SCM::Git<span class="hljs-comment"># Include tasks from other gems included in your Gemfile</span><span class="hljs-comment">#</span><span class="hljs-comment"># For documentation on these, see for example:</span><span class="hljs-comment">#</span><span class="hljs-comment">#   https://github.com/capistrano/rvm</span><span class="hljs-comment">#   https://github.com/capistrano/rbenv</span><span class="hljs-comment">#   https://github.com/capistrano/chruby</span><span class="hljs-comment">#   https://github.com/capistrano/bundler</span><span class="hljs-comment">#   https://github.com/capistrano/rails</span><span class="hljs-comment">#   https://github.com/capistrano/passenger</span><span class="hljs-comment">#</span><span class="hljs-comment"># require "capistrano/rvm"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rbenv"</span><span class="hljs-comment"># require "capistrano/chruby"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/bundler"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rails/assets"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/rails/migrations"</span><span class="hljs-keyword">require</span> <span class="hljs-string">"capistrano/passenger"</span>set <span class="hljs-symbol">:rbenv_type</span>, <span class="hljs-symbol">:user</span>set <span class="hljs-symbol">:rbenv_ruby</span>, <span class="hljs-string">'2.5.0'</span><span class="hljs-comment"># Load custom tasks from `lib/capistrano/tasks` if you have any defined</span>Dir.glob(<span class="hljs-string">"lib/capistrano/tasks/*.rake"</span>).each &#123; <span class="hljs-params">|r|</span> import r &#125;</code></pre><p>我的deploy.rb文件</p><pre><code class="hljs ruby"><span class="hljs-comment"># config valid for current version and patch releases of Capistrano</span>lock <span class="hljs-string">"~&gt; 3.10.2"</span>set <span class="hljs-symbol">:application</span>, <span class="hljs-string">"script_blog"</span>set <span class="hljs-symbol">:repo_url</span>, <span class="hljs-string">"https://github.com/dccmmtop/script_blog.git"</span><span class="hljs-comment"># Default branch is :master</span><span class="hljs-comment"># ask :branch, `git rev-parse --abbrev-ref HEAD`.chomp</span><span class="hljs-comment"># Default deploy_to directory is /var/www/my_app_name</span>set <span class="hljs-symbol">:deploy_to</span>, <span class="hljs-string">"/home/deploy/scrit_blog"</span><span class="hljs-comment"># Default value for :format is :airbrussh.</span><span class="hljs-comment"># set :format, :airbrussh</span><span class="hljs-comment"># You can configure the Airbrussh format using :format_options.</span><span class="hljs-comment"># These are the defaults.</span><span class="hljs-comment"># set :format_options, command_output: true, log_file: "log/capistrano.log", color: :auto, truncate: :auto</span><span class="hljs-comment"># Default value for :pty is false</span><span class="hljs-comment"># set :pty, true</span><span class="hljs-comment"># Default value for :linked_files is []</span><span class="hljs-comment"># 在服务器&lt;project-name&gt;/share/config/ 下，要手动新建这两个文件，</span>append <span class="hljs-symbol">:linked_files</span>, <span class="hljs-string">"config/database.yml"</span>,<span class="hljs-string">"config/secrets.yml"</span> <span class="hljs-comment"># Default value for linked_dirs is []</span>append <span class="hljs-symbol">:linked_dirs</span>, <span class="hljs-string">"log"</span>, <span class="hljs-string">"tmp/pids"</span>, <span class="hljs-string">"tmp/cache"</span>, <span class="hljs-string">"tmp/sockets"</span>, <span class="hljs-string">"public/system"</span><span class="hljs-comment"># Default value for default_env is &#123;&#125;</span><span class="hljs-comment"># set :default_env, &#123; path: "/opt/ruby/bin:$PATH" &#125;</span><span class="hljs-comment"># Default value for local_user is ENV['USER']</span><span class="hljs-comment"># set :local_user, -&gt; &#123; `git config user.name`.chomp &#125;</span><span class="hljs-comment"># Default value for keep_releases is 5</span><span class="hljs-comment"># set :keep_releases, 5</span><span class="hljs-comment"># Uncomment the following to require manually verifying the host key before first deploy.</span><span class="hljs-comment"># set :ssh_options, verify_host_key: :secure</span></code></pre><p>注意<code>append :linked_files, &quot;config/database.yml&quot;,&quot;config/secrets.yml&quot;</code> </p><p><code>database.yml</code>和<code>secrets.yml</code>是手动在,<code>share/config/</code>目录下新建的，一个是连接数据库的相关信息，一个是安全验证相关信息。我的部署目录是<code>scriot_blog/</code> 就新建  <code>script_blog/share/config/</code> 目录</p><p>同时新建以上两个文件。</p><p>database.yml</p><pre><code class="hljs yml"><span class="hljs-attr">production:</span><span class="hljs-attr">adapter:</span> <span class="hljs-string">postgresql</span><span class="hljs-attr">pool:</span> &lt;%=<span class="ruby"> ENV.fetch(<span class="hljs-string">"RAILS_MAX_THREADS"</span>) &#123; <span class="hljs-number">5</span> &#125; </span>%&gt;<span class="hljs-attr">timeout:</span> <span class="hljs-number">5000</span><span class="hljs-attr">database:</span> <span class="hljs-string">production_blog</span><span class="hljs-attr">username:</span> <span class="hljs-string">'xxx'</span><span class="hljs-attr">password:</span> <span class="hljs-string">'xxx'</span></code></pre><p>secrets.yml</p><pre><code class="hljs yml"><span class="hljs-attr">production:</span><span class="hljs-attr">secret_key_base:</span> <span class="hljs-string">xxxxxx</span></code></pre><p>其中<code>secret_key_base</code>的值是在本地项目下 执行<code>rake secret</code> 命令生成的。</p></li><li><p>deploy/production.rb</p><pre><code class="hljs ruby"><span class="hljs-comment"># server-based syntax</span><span class="hljs-comment"># ======================</span><span class="hljs-comment"># Defines a single server with a list of roles and multiple properties.</span><span class="hljs-comment"># You can define all roles on a single server, or split them:</span><span class="hljs-comment"># server "39.108.138.149", user: "root", roles: %w&#123;app db web&#125;, my_property: :my_value</span>server <span class="hljs-string">"xxxx服务器的ip"</span>, <span class="hljs-symbol">user:</span> <span class="hljs-string">"deploy"</span>, <span class="hljs-symbol">roles:</span> <span class="hljs-string">%w&#123;app db web&#125;</span><span class="hljs-comment"># server "example.com", user: "deploy", roles: %w&#123;app web&#125;, other_property: :other_value</span><span class="hljs-comment"># server "db.example.com", user: "deploy", roles: %w&#123;db&#125;</span><span class="hljs-comment"># role-based syntax</span><span class="hljs-comment"># ==================</span><span class="hljs-comment"># Defines a role with one or multiple servers. The primary server in each</span><span class="hljs-comment"># group is considered to be the first unless any hosts have the primary</span><span class="hljs-comment"># property set. Specify the username and a domain or IP for the server.</span><span class="hljs-comment"># Don't use `:all`, it's a meta role.</span><span class="hljs-comment"># role :app, %w&#123;deploy<span class="hljs-doctag">@example</span>.com&#125;, my_property: :my_value</span><span class="hljs-comment"># role :web, %w&#123;user1<span class="hljs-doctag">@primary</span>.com user2<span class="hljs-doctag">@additional</span>.com&#125;, other_property: :other_value</span><span class="hljs-comment"># role :db,  %w&#123;deploy<span class="hljs-doctag">@example</span>.com&#125;</span><span class="hljs-comment"># Configuration</span><span class="hljs-comment"># =============</span><span class="hljs-comment"># You can set any configuration variable like in config/deploy.rb</span><span class="hljs-comment"># These variables are then only loaded and set in this stage.</span><span class="hljs-comment"># For available Capistrano configuration variables see the documentation page.</span><span class="hljs-comment"># http://capistranorb.com/documentation/getting-started/configuration/</span><span class="hljs-comment"># Feel free to add new variables to customise your setup.</span><span class="hljs-comment"># Custom SSH Options</span><span class="hljs-comment"># ==================</span><span class="hljs-comment"># You may pass any option but keep in mind that net/ssh understands a</span><span class="hljs-comment"># limited set of options, consult the Net::SSH documentation.</span><span class="hljs-comment"># http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start</span><span class="hljs-comment">#</span><span class="hljs-comment"># Global options</span><span class="hljs-comment"># --------------</span>set <span class="hljs-symbol">:ssh_options</span>, &#123;<span class="hljs-symbol">keys:</span> <span class="hljs-string">%w(/home/deploy/.ssh/id_rsa)</span>,<span class="hljs-symbol">port:</span> xxx<span class="hljs-comment"># forward_agent: false,</span><span class="hljs-comment"># auth_methods: %w(password)</span>&#125;<span class="hljs-comment">#</span><span class="hljs-comment"># The server-based syntax can be used to override options:</span><span class="hljs-comment"># ------------------------------------</span><span class="hljs-comment"># server "example.com",</span><span class="hljs-comment">#   user: "user_name",</span><span class="hljs-comment">#     keys: %w(/home/user_name/.ssh/id_rsa),</span><span class="hljs-comment">#     forward_agent: false,</span><span class="hljs-comment">#     auth_methods: %w(publickey password)</span><span class="hljs-comment">#     # password: "please use keys"</span><span class="hljs-comment">#   &#125;</span></code></pre></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>  本地执行<code>cap production deploy</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>rails</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/05/hello-world/"/>
    <url>/2020/06/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
